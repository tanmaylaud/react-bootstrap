{"version":3,"sources":["webpack:///./src/examples/Alert/Link.js","webpack:///./src/examples/Alert/Dismissible.js","webpack:///./src/examples/Alert/AdditionalContent.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/components/Callout.js","webpack:///./src/pages/components/alerts.mdx","webpack:///./src/examples/Alert/DismissibleControlled.js","webpack:///./src/examples/Alert/Basic.js"],"names":["module","exports","query","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","parentName","codeText","Basic","title","Link","AdditionalContent","Dismissible","DismissibleControlled","metadata","data","Alert","AlertHeading","exportedBy","AlertLink","isMDXComponent"],"mappings":"+EAAAA,EAAOC,QAAU,wU,qBCAjBD,EAAOC,QAAU,koB,mBCAjBD,EAAOC,QAAU,qc,qBCCjBD,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,kCCArK,yBAIA,EAAe,UAuCf,IAXA,SAAiB,GAAjB,qCACA,OACA,kEACA,kDACA,mC,qWCtBaC,EAAQ,YAaRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,mBAAQ,CACN,GAAM,UADR,UAGA,mBAAGC,UAAU,QAAb,4HAIA,mBAAQ,CACN,GAAM,YADR,YAGA,wJACuD,4BAAYC,WAAW,KAAvB,WADvD,MAEA,cAAC,IAAD,CAAiBC,SAAUC,IAAOJ,QAAQ,oBAC1C,cAAC,IAAD,CAASK,MAAM,8CAA8CL,QAAQ,WAArE,2VAKsC,sCALtC,WAOA,mBAAQ,CACN,GAAM,SADR,SAGA,6CAA0B,4BAAYE,WAAW,KAAvB,gBAA1B,mEAEA,cAAC,IAAD,CAAiBC,SAAUG,IAAMN,QAAQ,oBACzC,mBAAQ,CACN,GAAM,sBADR,sBAGA,iHACA,cAAC,IAAD,CAAiBG,SAAUI,IAAmBP,QAAQ,oBACtD,mBAAQ,CACN,GAAM,cADR,cAGA,kCAAe,4BAAYE,WAAW,KAAvB,eAAf,4DAEA,cAAC,IAAD,CAAiBC,SAAUK,IAAaR,QAAQ,oBAChD,uIAEA,cAAC,IAAD,CAAiBG,SAAUM,IAAuBT,QAAQ,oBAC1D,mBAAQ,CACN,GAAM,OADR,OAGA,cAAC,IAAD,CAAcU,SAAUX,EAAMY,KAAKC,MAAOZ,QAAQ,iBAClD,cAAC,IAAD,CAAcU,SAAUX,EAAMY,KAAKE,aAAcC,WAAYf,EAAMY,KAAKC,MAAOZ,QAAQ,iBACvF,cAAC,IAAD,CAAcU,SAAUX,EAAMY,KAAKI,UAAWD,WAAYf,EAAMY,KAAKC,MAAOZ,QAAQ,kBAMxFH,EAAWmB,gBAAiB,G,mBCrG5B1B,EAAOC,QAAU,iwB,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-components-alerts-mdx-2cd13e797426ca171d0b.js","sourcesContent":["module.exports = \"[\\n  'primary',\\n  'secondary',\\n  'success',\\n  'danger',\\n  'warning',\\n  'info',\\n  'light',\\n  'dark',\\n].map((variant, idx) => (\\n  <Alert key={idx} variant={variant}>\\n    This is a {variant} alert with{' '}\\n    <Alert.Link href=\\\"#\\\">an example link</Alert.Link>. Give it a click if you\\n    like.\\n  </Alert>\\n));\\n\"","module.exports = \"function AlertDismissibleExample() {\\n  const [show, setShow] = useState(true);\\n\\n  if (show) {\\n    return (\\n      <Alert variant=\\\"danger\\\" onClose={() => setShow(false)} dismissible>\\n        <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\\n        <p>\\n          Change this and that and try again. Duis mollis, est non commodo\\n          luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\\n          Cras mattis consectetur purus sit amet fermentum.\\n        </p>\\n      </Alert>\\n    );\\n  }\\n  return <Button onClick={() => setShow(true)}>Show Alert</Button>;\\n}\\n\\nrender(<AlertDismissibleExample />);\\n\"","module.exports = \"<Alert variant=\\\"success\\\">\\n  <Alert.Heading>Hey, nice to see you</Alert.Heading>\\n  <p>\\n    Aww yeah, you successfully read this important alert message. This example\\n    text is going to run a bit longer so that you can see how spacing within an\\n    alert works with this kind of content.\\n  </p>\\n  <hr />\\n  <p className=\\\"mb-0\\\">\\n    Whenever you need to, be sure to use margin utilities to keep things nice\\n    and tidy.\\n  </p>\\n</Alert>;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/Shivprasad/Desktop/opensource/react-bootstrap/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport AdditionalContent from '../../examples/Alert/AdditionalContent';\nimport Basic from '../../examples/Alert/Basic';\nimport Dismissible from '../../examples/Alert/Dismissible';\nimport DismissibleControlled from '../../examples/Alert/DismissibleControlled';\nimport Link from '../../examples/Alert/Link';\nexport const query = graphql`\n  query AlertQuery {\n    Alert: componentMetadata(displayName: { eq: \"Alert\" }) {\n      ...ComponentApi_metadata\n    }\n    AlertLink: componentMetadata(displayName: { eq: \"AlertLink\" }) {\n      ...ComponentApi_metadata\n    }\n    AlertHeading: componentMetadata(displayName: { eq: \"AlertHeading\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"alerts\"\n    }}>{`Alerts`}</h1>\n    <p className=\"lead\">\n  Provide contextual feedback messages for typical user actions with the handful\n  of available and flexible alert messages.\n    </p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Alerts are available for any length of text, as well as an optional\ndismiss button. For proper styling, use one of the eight `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{`s.`}</p>\n    <ReactPlayground codeText={Basic} mdxType=\"ReactPlayground\" />\n    <Callout title=\"Conveying meaning to assistive technologies\" mdxType=\"Callout\">\n  Using color to add meaning only provides a visual indication, which will not\n  be conveyed to users of assistive technologies â€“ such as screen readers.\n  Ensure that information denoted by the color is either obvious from the content\n  itself (e.g. the visible text), or is included through alternative means,\n  such as additional text hidden with the <code>.sr-only</code> class.\n    </Callout>\n    <h3 {...{\n      \"id\": \"links\"\n    }}>{`Links`}</h3>\n    <p>{`For links, use the `}<inlineCode parentName=\"p\">{`<Alert.Link>`}</inlineCode>{` component to provide matching\ncolored links within any alert.`}</p>\n    <ReactPlayground codeText={Link} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"additional-content\"\n    }}>{`Additional content`}</h3>\n    <p>{`Alerts can contain whatever content you like. Headers, paragraphs, dividers, go crazy.`}</p>\n    <ReactPlayground codeText={AdditionalContent} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"dismissing\"\n    }}>{`Dismissing`}</h3>\n    <p>{`Add the `}<inlineCode parentName=\"p\">{`dismissible`}</inlineCode>{` prop to add a functioning dismiss\nbutton to the Alert.`}</p>\n    <ReactPlayground codeText={Dismissible} mdxType=\"ReactPlayground\" />\n    <p>{`You can also control the visual state directly which is great if you\nwant to build more complicated alerts.`}</p>\n    <ReactPlayground codeText={DismissibleControlled} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Alert} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.AlertHeading} exportedBy={props.data.Alert} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.AlertLink} exportedBy={props.data.Alert} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"function AlertDismissible() {\\n  const [show, setShow] = useState(true);\\n\\n  return (\\n    <>\\n      <Alert show={show} variant=\\\"success\\\">\\n        <Alert.Heading>How's it going?!</Alert.Heading>\\n        <p>\\n          Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget\\n          lacinia odio sem nec elit. Cras mattis consectetur purus sit amet\\n          fermentum.\\n        </p>\\n        <hr />\\n        <div className=\\\"d-flex justify-content-end\\\">\\n          <Button onClick={() => setShow(false)} variant=\\\"outline-success\\\">\\n            Close me y'all!\\n          </Button>\\n        </div>\\n      </Alert>\\n\\n      {!show && <Button onClick={() => setShow(true)}>Show Alert</Button>}\\n    </>\\n  );\\n}\\n\\nrender(<AlertDismissible />);\\n\"","module.exports = \"[\\n  'primary',\\n  'secondary',\\n  'success',\\n  'danger',\\n  'warning',\\n  'info',\\n  'light',\\n  'dark',\\n].map((variant, idx) => (\\n  <Alert key={idx} variant={variant}>\\n    This is a {variant} alertâ€”check it out!\\n  </Alert>\\n));\\n\""],"sourceRoot":""}