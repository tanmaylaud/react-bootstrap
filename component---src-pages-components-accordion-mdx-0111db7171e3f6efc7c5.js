(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"4AS7":function(e,n){e.exports='function CustomToggle({ children, eventKey }) {\n  const decoratedOnClick = useAccordionToggle(eventKey, () =>\n    console.log(\'totally custom!\'),\n  );\n\n  return (\n    <button\n      type="button"\n      style={{ backgroundColor: \'pink\' }}\n      onClick={decoratedOnClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction Example() {\n  return (\n    <Accordion defaultActiveKey="0">\n      <Card>\n        <Card.Header>\n          <CustomToggle eventKey="0">Click me!</CustomToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey="0">\n          <Card.Body>Hello! I\'m the body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <CustomToggle eventKey="1">Click me!</CustomToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey="1">\n          <Card.Body>Hello! I\'m another body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nrender(<Example />);\n'},"8Sn+":function(e,n){e.exports='function ContextAwareToggle({ children, eventKey, callback }) {\n  const currentEventKey = useContext(AccordionContext);\n\n  const decoratedOnClick = useAccordionToggle(\n    eventKey,\n    () => callback && callback(eventKey),\n  );\n\n  const isCurrentEventKey = currentEventKey === eventKey;\n\n  return (\n    <button\n      type="button"\n      style={{ backgroundColor: isCurrentEventKey ? \'pink\' : \'lavender\' }}\n      onClick={decoratedOnClick}\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction Example() {\n  return (\n    <Accordion defaultActiveKey="0">\n      <Card>\n        <Card.Header>\n          <ContextAwareToggle eventKey="0">Click me!</ContextAwareToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey="0">\n          <Card.Body>Hello! I\'m the body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      <Card>\n        <Card.Header>\n          <ContextAwareToggle eventKey="1">Click me!</ContextAwareToggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey="1">\n          <Card.Body>Hello! I\'m another body</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nrender(<Example />);\n'},GsbF:function(e,n){e.exports='<Accordion defaultActiveKey="0">\n  <Card>\n    <Accordion.Toggle as={Card.Header} eventKey="0">\n      Click me!\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey="0">\n      <Card.Body>Hello! I\'m the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Accordion.Toggle as={Card.Header} eventKey="1">\n      Click me!\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey="1">\n      <Card.Body>Hello! I\'m another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>;\n'},Q6D8:function(e,n,o){e.exports={callout:"Callout-styles-module--callout--1_K3h",warning:"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h",danger:"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h"}},d3um:function(e,n,o){"use strict";o.r(n),o.d(n,"query",(function(){return x})),o.d(n,"_frontmatter",(function(){return b})),o.d(n,"default",(function(){return T}));var t=o("zLVn"),a=(o("mXGw"),o("7ljp")),d=o("Snbm"),c=(o("h55t"),o("vXRK")),r=o("1u5/"),l=o("yEIy"),i=o.n(l),s=o("j80X"),C=o.n(s),m=o("GsbF"),u=o.n(m),y=o("4AS7"),p=o.n(y),g=o("8Sn+"),A=o.n(g),x="621183599",b={},h={query:x,_frontmatter:b},v=d.a;function T(e){var n=e.components,o=Object(t.a)(e,["components"]);return Object(a.mdx)(v,Object.assign({},h,o,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("h1",{id:"accordion"},"Accordion"),Object(a.mdx)("p",{className:"lead"},"Accordions provide a way to restrict Card components to only open one at a time."),Object(a.mdx)("h2",{id:"examples"},"Examples"),Object(a.mdx)("p",null,"Accordions use Card components to provide styling of the Accordion components.\nUse AccordionToggle to provide a button that switches between each AccordionCollapse component."),Object(a.mdx)("h3",{id:"basic-example"},"Basic Example"),Object(a.mdx)(r.a,{codeText:i.a,mdxType:"ReactPlayground"}),Object(a.mdx)("h3",{id:"fully-collapsed-state"},"Fully Collapsed State"),Object(a.mdx)("p",null,"If you want your Accordion to start in a fully-collapsed state, then simply don't pass in a ",Object(a.mdx)("inlineCode",{parentName:"p"},"defaultActiveKey")," prop to ",Object(a.mdx)("inlineCode",{parentName:"p"},"Accordion"),"."),Object(a.mdx)(r.a,{codeText:C.a,mdxType:"ReactPlayground"}),Object(a.mdx)("h3",{id:"entire-header-clickable"},"Entire Header Clickable"),Object(a.mdx)("p",null,"Each of the Card components in the Accordion can have their entire header clickable, by setting the AccordionToggle's\nunderlying component to be a CardHeader component."),Object(a.mdx)(r.a,{codeText:u.a,mdxType:"ReactPlayground"}),Object(a.mdx)("h3",{id:"custom-toggle"},"Custom Toggle"),Object(a.mdx)("p",null,"You can now hook into the Accordion toggle functionality via ",Object(a.mdx)("inlineCode",{parentName:"p"},"useAccordionToggle")," to make custom toggle components."),Object(a.mdx)(r.a,{codeText:p.a,mdxType:"ReactPlayground"}),Object(a.mdx)("h3",{id:"custom-toggle-with-expansion-awareness"},"Custom Toggle with Expansion Awareness"),Object(a.mdx)("p",null,"You may wish to have different styles for the toggle if it's associated section is expanded,\nthis can be achieved with a custom toggle that is context aware and also takes advantage of the ",Object(a.mdx)("inlineCode",{parentName:"p"},"useAccordionToggle")," hook."),Object(a.mdx)(r.a,{codeText:A.a,mdxType:"ReactPlayground"}),Object(a.mdx)("h2",{id:"api"},"API"),Object(a.mdx)(c.a,{metadata:o.data.Accordion,mdxType:"ComponentApi"}),Object(a.mdx)(c.a,{metadata:o.data.AccordionToggle,exportedBy:o.data.Accordion,mdxType:"ComponentApi"}),Object(a.mdx)(c.a,{metadata:o.data.AccordionCollapse,exportedBy:o.data.Accordion,mdxType:"ComponentApi"}),Object(a.mdx)("h3",{id:"useaccordiontoggle"},"useAccordionToggle"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\n\nconst decoratedOnClick = useAccordionToggle(eventKey, onClick);\n")))}T.isMDXComponent=!0},h55t:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),d=o("Q6D8");n.a=function(e){var n=e.title,o=e.children,t=e.theme;return a.a.createElement("aside",{role:"note",className:d[t||"warning"]},n&&a.a.createElement("header",{className:"h5"},n),a.a.createElement("div",null,o))}},j80X:function(e,n){e.exports='<Accordion>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant="link" eventKey="0">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey="0">\n      <Card.Body>Hello! I\'m the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant="link" eventKey="1">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey="1">\n      <Card.Body>Hello! I\'m another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>;\n'},yEIy:function(e,n){e.exports='<Accordion defaultActiveKey="0">\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant="link" eventKey="0">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey="0">\n      <Card.Body>Hello! I\'m the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant="link" eventKey="1">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey="1">\n      <Card.Body>Hello! I\'m another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>;\n'}}]);
//# sourceMappingURL=component---src-pages-components-accordion-mdx-0111db7171e3f6efc7c5.js.map