{"componentChunkName":"component---src-pages-components-buttons-mdx","path":"/components/buttons/","result":{"data":{"Button":{"displayName":"Button","composes":["BsPrefixPropsWithChildren"],"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'btn'"}],"defaultValue":{"value":"'btn'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"variant","doclets":[],"defaultValue":{"value":"'primary'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>One or more button variant combinations</p>\n<p>buttons may be one of a variety of visual variants such as:</p>\n<p><code class=\"language-text\">&#39;primary&#39;, &#39;secondary&#39;, &#39;success&#39;, &#39;danger&#39;, &#39;warning&#39;, &#39;info&#39;, &#39;dark&#39;, &#39;light&#39;, &#39;link&#39;</code></p>\n<p>as well as \"outline\" versions (prefixed by 'outline-*')</p>\n<p><code class=\"language-text\">&#39;outline-primary&#39;, &#39;outline-secondary&#39;, &#39;outline-success&#39;, &#39;outline-danger&#39;, &#39;outline-warning&#39;, &#39;outline-info&#39;, &#39;outline-dark&#39;, &#39;outline-light&#39;</code></p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"size","doclets":[{"tag":"type","value":"('sm'|'lg')"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specifies a large or small button.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'sm'","computed":false},{"value":"'lg'","computed":false}],"raw":null}},{"name":"block","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Spans the full width of the Button parent</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"active","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Manually set the visual state of the button to <code class=\"language-text\">:active</code></p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"disabled","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Disables the Button, preventing mouse events,\neven if the underlying component is an <code class=\"language-text\">&lt;a&gt;</code> element</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"href","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Providing a <code class=\"language-text\">href</code> will render an <code class=\"language-text\">&lt;a&gt;</code> element, <em>styled</em> as a button.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"type","doclets":[{"tag":"default","value":"'button'"}],"defaultValue":{"value":"'button'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Defines HTML button type attribute.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'reset'","computed":false},{"value":"'submit'","computed":false},{"value":"null","computed":false}],"raw":null}},{"name":"as","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"target","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"any","value":null,"raw":null}}]},"ToggleButtonGroup":{"displayName":"ToggleButtonGroup","composes":null,"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"name","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An HTML <code class=\"language-text\">&lt;input&gt;</code> name for each child button.</p>\n<p><strong>Required if <code class=\"language-text\">type</code> is set to <code class=\"language-text\">&#39;radio&#39;</code></strong></p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"value","doclets":[{"tag":"controllable","value":"onChange"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The value, or array of values, of the active (pressed) buttons</p>"}},"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"onChange","doclets":[{"tag":"controllable","value":"value"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback fired when a button is pressed, depending on whether the <code class=\"language-text\">type</code>\nis <code class=\"language-text\">&#39;radio&#39;</code> or <code class=\"language-text\">&#39;checkbox&#39;</code>, <code class=\"language-text\">onChange</code> will be called with the value or\narray of active values</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"type","doclets":[],"defaultValue":{"value":"'radio'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The input <code class=\"language-text\">type</code> of the rendered buttons, determines the toggle behavior\nof the buttons</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'checkbox'","computed":false},{"value":"'radio'","computed":false}],"raw":null}}]},"ToggleButton":{"displayName":"ToggleButton","composes":["ButtonProps"],"description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"type","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The <code class=\"language-text\">&lt;input&gt;</code> element <code class=\"language-text\">type</code></p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'checkbox'","computed":false},{"value":"'radio'","computed":false}],"raw":null}},{"name":"name","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The HTML input name, used to group like checkboxes or radio buttons together\nsemantically</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"checked","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The checked state of the input, managed by <code class=\"language-text\">&lt;ToggleButtonGroup&gt;</code> automatically</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"disabled","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The disabled state of both the label and input</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"onChange","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the underlying input element changes. This is passed\ndirectly to the <code class=\"language-text\">&lt;input&gt;</code> so shares the same signature as a native <code class=\"language-text\">onChange</code> event.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"value","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The value of the input, should be unique amongst it's siblings when nested in a\n<code class=\"language-text\">ToggleButtonGroup</code>.</p>"}},"required":true,"type":{"name":"any","value":null,"raw":null}},{"name":"inputRef","doclets":[{"tag":"type","value":"{ReactRef}"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A ref attached to the <code class=\"language-text\">&lt;input&gt;</code> element</p>"}},"required":false,"type":{"name":"ReactRef","value":null,"raw":null}}]}},"pageContext":{"frontmatter":{}}}}