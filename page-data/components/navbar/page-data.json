{"componentChunkName":"component---src-pages-components-navbar-js","path":"/components/navbar/","result":{"data":{"Navbar":{"composes":["BsPrefixPropsWithChildren"],"displayName":"Navbar","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'navbar'"}],"defaultValue":{"value":"'navbar'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"variant","doclets":[{"tag":"type","value":"{('light'|'dark')}"}],"defaultValue":{"value":"'light'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The general visual variant a the Navbar.\nUse in combination with the <code class=\"language-text\">bg</code> prop, <code class=\"language-text\">background-color</code> utilities,\nor your own background styles.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'light'","computed":false},{"value":"'dark'","computed":false}],"raw":null}},{"name":"expand","doclets":[],"defaultValue":{"value":"true","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The breakpoint, below which, the Navbar will collapse.\nWhen <code class=\"language-text\">true</code> the Navbar will always be expanded regardless of screen size.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"true","computed":false},{"value":"'sm'","computed":false},{"value":"'md'","computed":false},{"value":"'lg'","computed":false},{"value":"'xl'","computed":false}],"raw":null}},{"name":"bg","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A convenience prop for adding <code class=\"language-text\">bg-*</code> utility classes since they are so commonly used here.\n<code class=\"language-text\">light</code> and <code class=\"language-text\">dark</code> are common choices but any <code class=\"language-text\">bg-*</code> class is supported, including any custom ones you might define.</p>\n<p>Pairs nicely with the <code class=\"language-text\">variant</code> prop.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"fixed","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Create a fixed navbar along the top or bottom of the screen, that scrolls with the\npage. A convenience prop for the <code class=\"language-text\">fixed-*</code> positioning classes.</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false}],"raw":null}},{"name":"sticky","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Position the navbar at the top or bottom of the viewport,\nbut only after scrolling past it. . A convenience prop for the <code class=\"language-text\">sticky-*</code> positioning classes.</p>\n<p> <strong>Not supported in &#x3C;= IE11 and other older browsers without a polyfill</strong></p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false}],"raw":null}},{"name":"as","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Set a custom element for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}},{"name":"onToggle","doclets":[{"tag":"controllable","value":"expanded"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when the <code class=\"language-text\">&lt;Navbar&gt;</code> body collapses or expands. Fired when\na <code class=\"language-text\">&lt;Navbar.Toggle&gt;</code> is clicked and called with the new <code class=\"language-text\">expanded</code>\nboolean value.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onSelect","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A callback fired when a descendant of a child <code class=\"language-text\">&lt;Nav&gt;</code> is selected. Should\nbe used to execute complex closing or other miscellaneous actions desired\nafter selecting a descendant of <code class=\"language-text\">&lt;Nav&gt;</code>. Does nothing if no <code class=\"language-text\">&lt;Nav&gt;</code> or <code class=\"language-text\">&lt;Nav&gt;</code>\ndescendants exist. The callback is called with an eventKey, which is a\nprop from the selected <code class=\"language-text\">&lt;Nav&gt;</code> descendant, and an event.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>\n <span class=\"token parameter\">eventKey<span class=\"token operator\">:</span> mixed<span class=\"token punctuation\">,</span>\n event<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SyntheticEvent</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>For basic closing behavior after all <code class=\"language-text\">&lt;Nav&gt;</code> descendant onSelect events in\nmobile viewports, try using collapseOnSelect.</p>\n<p>Note: If you are manually closing the navbar using this <code class=\"language-text\">OnSelect</code> prop,\nensure that you are setting <code class=\"language-text\">expanded</code> to false and not <em>toggling</em> between\ntrue and false.</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"collapseOnSelect","doclets":[],"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Toggles <code class=\"language-text\">expanded</code> to <code class=\"language-text\">false</code> after the onSelect event of a descendant of a\nchild <code class=\"language-text\">&lt;Nav&gt;</code> fires. Does nothing if no <code class=\"language-text\">&lt;Nav&gt;</code> or <code class=\"language-text\">&lt;Nav&gt;</code> descendants exist.</p>\n<p>Manually controlling <code class=\"language-text\">expanded</code> via the onSelect callback is recommended instead,\nfor more complex operations that need to be executed after\nthe <code class=\"language-text\">select</code> event of <code class=\"language-text\">&lt;Nav&gt;</code> descendants.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"expanded","doclets":[{"tag":"controllable","value":"onToggle"}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Controls the visiblity of the navbar body</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"role","doclets":[{"tag":"default","value":"'navigation'"}],"defaultValue":{"value":"'navigation'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The ARIA role for the navbar, will default to 'navigation' for\nNavbars whose <code class=\"language-text\">as</code> is something other than <code class=\"language-text\">&lt;nav&gt;</code>.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]},"NavbarBrand":{"composes":["BsPrefixProps"],"displayName":"NavbarBrand","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'navbar'"}],"defaultValue":{"value":"'navbar'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"href","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>An href, when provided the Brand will render as an <code class=\"language-text\">&lt;a&gt;</code> element (unless <code class=\"language-text\">as</code> is provided).</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Set a custom element for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"NavbarToggle":{"composes":["BsPrefixPropsWithChildren"],"displayName":"NavbarToggle","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'navbar-toggler'"}],"defaultValue":{"value":"'navbar-toggler'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"label","doclets":[],"defaultValue":{"value":"'Toggle navigation'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>An accessible ARIA label for the toggler button.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"onClick","doclets":[{"tag":"private","value":true}],"defaultValue":null,"description":{"childMarkdownRemark":{"html":""}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"children","doclets":[],"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The toggle content. When empty, the default toggle will be rendered.</p>"}},"required":false,"type":{"name":"node","value":null,"raw":null}},{"name":"as","doclets":[],"defaultValue":{"value":"'button'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>You can use a custom element type for this component.</p>"}},"required":false,"type":{"name":"elementType","value":null,"raw":null}}]},"NavbarCollapse":{"composes":["Omit","BsPrefixProps"],"displayName":"NavbarCollapse","description":{"childMarkdownRemark":{"html":""}},"props":[{"name":"bsPrefix","doclets":[{"tag":"default","value":"'navbar-collapse'"}],"defaultValue":{"value":"'navbar-collapse'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Change the underlying component CSS base class name and modifier class names prefix. <strong>This is an escape hatch</strong> for working with heavily customized bootstrap css.</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}}]}},"pageContext":{}}}