{"version":3,"sources":["webpack:///./src/examples/Form/ValidationFormik.js","webpack:///./src/examples/Form/CheckCustomInline.js","webpack:///./src/examples/Form/ValidationTooltips.js","webpack:///./src/examples/Form/SelectCustomSize.js","webpack:///./src/examples/Form/GridAutoSizingColMix.js","webpack:///./src/examples/Form/FormFile.js","webpack:///./src/examples/Form/ValidationNative.js","webpack:///./src/examples/Form/CheckApi.js","webpack:///./src/examples/Form/NoLabels.js","webpack:///./src/pages/components/forms.js","webpack:///./src/examples/Form/File.js","webpack:///./src/examples/Form/GridColSizes.js","webpack:///./src/examples/Form/FileButtonTextScss.js","webpack:///./src/examples/Form/CheckCustom.js","webpack:///./src/examples/Form/Basic.js","webpack:///./src/examples/Form/FileApi.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/examples/Form/SelectSizes.js","webpack:///./src/examples/Form/Range.js","webpack:///./src/examples/Form/FormTextInline.js","webpack:///./src/examples/Form/CheckInline.js","webpack:///./src/examples/Form/SelectCustom.js","webpack:///./src/examples/Form/FormDisabledInputs.js","webpack:///./src/examples/Form/GridAutoSizingCustom.js","webpack:///./src/examples/Form/Plaintext.js","webpack:///./src/examples/Form/TextControls.js","webpack:///./src/examples/Form/FormLabelSizing.js","webpack:///./src/components/Callout.js","webpack:///./src/examples/Form/InputSizes.js","webpack:///./src/examples/Form/Check.js","webpack:///./src/examples/Form/FormDisabled.js","webpack:///./src/examples/Form/InputReadOnly.js","webpack:///./src/examples/Form/FileButtonTextHTML.js","webpack:///./src/examples/Form/SelectCustomHtmlSize.js","webpack:///./src/examples/Form/GridAutoSizing.js","webpack:///./src/examples/Form/GridComplex.js","webpack:///./src/withLayout.js","webpack:///./src/examples/Form/FormGroup.js","webpack:///./src/examples/Form/GridBasic.js","webpack:///./src/examples/Form/Horizontal.js","webpack:///./src/examples/Form/RangeCustom.js","webpack:///./src/examples/Form/FormRow.js","webpack:///./src/examples/Form/InlineCustom.js","webpack:///./src/examples/Form/Inline.js","webpack:///./src/examples/Form/FormText.js","webpack:///./src/examples/Form/Switch.js"],"names":["module","exports","withLayout","data","h","id","codeText","FormBasic","FormTextControls","FormFile","FormInputSizes","SelectSizes","InputReadOnly","Plaintext","Range","Check","CheckInline","NoLabels","CheckApi","FormGroup","GridBasic","FormRow","GridComplex","Horizontal","FormLabelSizing","GridColSizes","GridAutoSizing","GridAutoSizingColMix","href","GridAutoSizingCustom","Inline","InlineCustom","FormText","FormTextInline","FormDisabledInputs","FormDisabled","theme","ValidationNative","ValidationFormik","ValidationTooltips","CheckCustom","Switch","CheckCustomInline","SelectCustom","SelectCustomSize","SelectCustomHtmlSize","RangeCustom","File","FileButtonTextHTML","FileButtonTextScss","FileApi","metadata","Form","exportedBy","FormLabel","FormControl","Feedback","FormCheck","FormCheckInput","FormCheckLabel","FormFileInput","FormFileLabel","query","Component","props","pathname","location","Layout","DefaultLayout","startsWith","ApiLayout"],"mappings":"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","file":"component---src-pages-components-forms-js-067af9e2ef3fc131e151.js","sourcesContent":["module.exports = \"const { Formik } = formik;\\n\\nconst schema = yup.object({\\n  firstName: yup.string().required(),\\n  lastName: yup.string().required(),\\n  username: yup.string().required(),\\n  city: yup.string().required(),\\n  state: yup.string().required(),\\n  zip: yup.string().required(),\\n  terms: yup.bool().required(),\\n});\\n\\nfunction FormExample() {\\n  return (\\n    <Formik\\n      validationSchema={schema}\\n      onSubmit={console.log}\\n      initialValues={{\\n        firstName: 'Mark',\\n        lastName: 'Otto',\\n      }}\\n    >\\n      {({\\n        handleSubmit,\\n        handleChange,\\n        handleBlur,\\n        values,\\n        touched,\\n        isValid,\\n        errors,\\n      }) => (\\n        <Form noValidate onSubmit={handleSubmit}>\\n          <Form.Row>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormik01\\\">\\n              <Form.Label>First name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"firstName\\\"\\n                value={values.firstName}\\n                onChange={handleChange}\\n                isValid={touched.firstName && !errors.firstName}\\n              />\\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormik02\\\">\\n              <Form.Label>Last name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"lastName\\\"\\n                value={values.lastName}\\n                onChange={handleChange}\\n                isValid={touched.lastName && !errors.lastName}\\n              />\\n\\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormikUsername\\\">\\n              <Form.Label>Username</Form.Label>\\n              <InputGroup>\\n                <InputGroup.Prepend>\\n                  <InputGroup.Text id=\\\"inputGroupPrepend\\\">@</InputGroup.Text>\\n                </InputGroup.Prepend>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  placeholder=\\\"Username\\\"\\n                  aria-describedby=\\\"inputGroupPrepend\\\"\\n                  name=\\\"username\\\"\\n                  value={values.username}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.username}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.username}\\n                </Form.Control.Feedback>\\n              </InputGroup>\\n            </Form.Group>\\n          </Form.Row>\\n          <Form.Row>\\n            <Form.Group as={Col} md=\\\"6\\\" controlId=\\\"validationFormik03\\\">\\n              <Form.Label>City</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"City\\\"\\n                name=\\\"city\\\"\\n                value={values.city}\\n                onChange={handleChange}\\n                isInvalid={!!errors.city}\\n              />\\n\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.city}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationFormik04\\\">\\n              <Form.Label>State</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"State\\\"\\n                name=\\\"state\\\"\\n                value={values.state}\\n                onChange={handleChange}\\n                isInvalid={!!errors.state}\\n              />\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.state}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationFormik05\\\">\\n              <Form.Label>Zip</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"Zip\\\"\\n                name=\\\"zip\\\"\\n                value={values.zip}\\n                onChange={handleChange}\\n                isInvalid={!!errors.zip}\\n              />\\n\\n              <Form.Control.Feedback type=\\\"invalid\\\">\\n                {errors.zip}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Form.Row>\\n          <Form.Group>\\n            <Form.Check\\n              required\\n              name=\\\"terms\\\"\\n              label=\\\"Agree to terms and conditions\\\"\\n              onChange={handleChange}\\n              isInvalid={!!errors.terms}\\n              feedback={errors.terms}\\n              id=\\\"validationFormik0\\\"\\n            />\\n          </Form.Group>\\n          <Button type=\\\"submit\\\">Submit form</Button>\\n        </Form>\\n      )}\\n    </Formik>\\n  );\\n}\\n\\nrender(<FormExample />);\\n\"","module.exports = \"<Form>\\n  {['checkbox', 'radio'].map((type) => (\\n    <div key={`custom-inline-${type}`} className=\\\"mb-3\\\">\\n      <Form.Check\\n        custom\\n        inline\\n        label=\\\"1\\\"\\n        type={type}\\n        id={`custom-inline-${type}-1`}\\n      />\\n      <Form.Check\\n        custom\\n        inline\\n        label=\\\"2\\\"\\n        type={type}\\n        id={`custom-inline-${type}-2`}\\n      />\\n      <Form.Check\\n        custom\\n        inline\\n        disabled\\n        label=\\\"3 (disabled)\\\"\\n        type={type}\\n        id={`custom-inline-${type}-3`}\\n      />\\n    </div>\\n  ))}\\n</Form>;\\n\"","module.exports = \"const { Formik } = formik;\\n\\nconst schema = yup.object({\\n  firstName: yup.string().required(),\\n  lastName: yup.string().required(),\\n  username: yup.string().required(),\\n  city: yup.string().required(),\\n  state: yup.string().required(),\\n  zip: yup.string().required(),\\n  file: yup.string().required(),\\n  terms: yup.bool().required(),\\n});\\n\\nfunction FormExample() {\\n  return (\\n    <Formik\\n      validationSchema={schema}\\n      onSubmit={console.log}\\n      initialValues={{\\n        firstName: 'Mark',\\n        lastName: 'Otto',\\n      }}\\n    >\\n      {({\\n        handleSubmit,\\n        handleChange,\\n        handleBlur,\\n        values,\\n        touched,\\n        isValid,\\n        errors,\\n      }) => (\\n        <Form noValidate onSubmit={handleSubmit}>\\n          <Form.Row>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormik101\\\">\\n              <Form.Label>First name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"firstName\\\"\\n                value={values.firstName}\\n                onChange={handleChange}\\n                isValid={touched.firstName && !errors.firstName}\\n              />\\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormik102\\\">\\n              <Form.Label>Last name</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                name=\\\"lastName\\\"\\n                value={values.lastName}\\n                onChange={handleChange}\\n                isValid={touched.lastName && !errors.lastName}\\n              />\\n\\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationFormikUsername2\\\">\\n              <Form.Label>Username</Form.Label>\\n              <InputGroup>\\n                <InputGroup.Prepend>\\n                  <InputGroup.Text id=\\\"inputGroupPrepend\\\">@</InputGroup.Text>\\n                </InputGroup.Prepend>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  placeholder=\\\"Username\\\"\\n                  aria-describedby=\\\"inputGroupPrepend\\\"\\n                  name=\\\"username\\\"\\n                  value={values.username}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.username}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n                  {errors.username}\\n                </Form.Control.Feedback>\\n              </InputGroup>\\n            </Form.Group>\\n          </Form.Row>\\n          <Form.Row>\\n            <Form.Group as={Col} md=\\\"6\\\" controlId=\\\"validationFormik103\\\">\\n              <Form.Label>City</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"City\\\"\\n                name=\\\"city\\\"\\n                value={values.city}\\n                onChange={handleChange}\\n                isInvalid={!!errors.city}\\n              />\\n\\n              <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n                {errors.city}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationFormik104\\\">\\n              <Form.Label>State</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"State\\\"\\n                name=\\\"state\\\"\\n                value={values.state}\\n                onChange={handleChange}\\n                isInvalid={!!errors.state}\\n              />\\n              <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n                {errors.state}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n            <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationFormik105\\\">\\n              <Form.Label>Zip</Form.Label>\\n              <Form.Control\\n                type=\\\"text\\\"\\n                placeholder=\\\"Zip\\\"\\n                name=\\\"zip\\\"\\n                value={values.zip}\\n                onChange={handleChange}\\n                isInvalid={!!errors.zip}\\n              />\\n\\n              <Form.Control.Feedback type=\\\"invalid\\\" tooltip>\\n                {errors.zip}\\n              </Form.Control.Feedback>\\n            </Form.Group>\\n          </Form.Row>\\n          <Form.Group>\\n            <Form.File\\n              className=\\\"position-relative\\\"\\n              required\\n              name=\\\"file\\\"\\n              label=\\\"File\\\"\\n              onChange={handleChange}\\n              isInvalid={!!errors.file}\\n              feedback={errors.file}\\n              id=\\\"validationFormik107\\\"\\n              feedbackTooltip\\n            />\\n          </Form.Group>\\n          <Form.Group>\\n            <Form.Check\\n              required\\n              name=\\\"terms\\\"\\n              label=\\\"Agree to terms and conditions\\\"\\n              onChange={handleChange}\\n              isInvalid={!!errors.terms}\\n              feedback={errors.terms}\\n              id=\\\"validationFormik106\\\"\\n              feedbackTooltip\\n            />\\n          </Form.Group>\\n          <Button type=\\\"submit\\\">Submit form</Button>\\n        </Form>\\n      )}\\n    </Formik>\\n  );\\n}\\n\\nrender(<FormExample />);\\n\"","module.exports = \"<Form>\\n  <Form.Group controlId=\\\"exampleForm.SelectCustomSizeSm\\\">\\n    <Form.Label>Custom select Small</Form.Label>\\n    <Form.Control as=\\\"select\\\" size=\\\"sm\\\" custom>\\n      <option>1</option>\\n      <option>2</option>\\n      <option>3</option>\\n      <option>4</option>\\n      <option>5</option>\\n    </Form.Control>\\n  </Form.Group>\\n  <Form.Group controlId=\\\"exampleForm.SelectCustomSizeLg\\\">\\n    <Form.Label>Custom select Large</Form.Label>\\n    <Form.Control as=\\\"select\\\" size=\\\"lg\\\" custom>\\n      <option>1</option>\\n      <option>2</option>\\n      <option>3</option>\\n      <option>4</option>\\n      <option>5</option>\\n    </Form.Control>\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Row className=\\\"align-items-center\\\">\\n    <Col sm={3} className=\\\"my-1\\\">\\n      <Form.Label htmlFor=\\\"inlineFormInputName\\\" srOnly>\\n        Name\\n      </Form.Label>\\n      <Form.Control id=\\\"inlineFormInputName\\\" placeholder=\\\"Jane Doe\\\" />\\n    </Col>\\n    <Col sm={3} className=\\\"my-1\\\">\\n      <Form.Label htmlFor=\\\"inlineFormInputGroupUsername\\\" srOnly>\\n        Username\\n      </Form.Label>\\n      <InputGroup>\\n        <InputGroup.Prepend>\\n          <InputGroup.Text>@</InputGroup.Text>\\n        </InputGroup.Prepend>\\n        <FormControl id=\\\"inlineFormInputGroupUsername\\\" placeholder=\\\"Username\\\" />\\n      </InputGroup>\\n    </Col>\\n    <Col xs=\\\"auto\\\" className=\\\"my-1\\\">\\n      <Form.Check type=\\\"checkbox\\\" id=\\\"autoSizingCheck2\\\" label=\\\"Remember me\\\" />\\n    </Col>\\n    <Col xs=\\\"auto\\\" className=\\\"my-1\\\">\\n      <Button type=\\\"submit\\\">Submit</Button>\\n    </Col>\\n  </Form.Row>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Group>\\n    <Form.File id=\\\"exampleFormControlFile1\\\" label=\\\"Example file input\\\" />\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"function FormExample() {\\n  const [validated, setValidated] = useState(false);\\n\\n  const handleSubmit = (event) => {\\n    const form = event.currentTarget;\\n    if (form.checkValidity() === false) {\\n      event.preventDefault();\\n      event.stopPropagation();\\n    }\\n\\n    setValidated(true);\\n  };\\n\\n  return (\\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\\n      <Form.Row>\\n        <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationCustom01\\\">\\n          <Form.Label>First name</Form.Label>\\n          <Form.Control\\n            required\\n            type=\\\"text\\\"\\n            placeholder=\\\"First name\\\"\\n            defaultValue=\\\"Mark\\\"\\n          />\\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\\n        </Form.Group>\\n        <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationCustom02\\\">\\n          <Form.Label>Last name</Form.Label>\\n          <Form.Control\\n            required\\n            type=\\\"text\\\"\\n            placeholder=\\\"Last name\\\"\\n            defaultValue=\\\"Otto\\\"\\n          />\\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\\n        </Form.Group>\\n        <Form.Group as={Col} md=\\\"4\\\" controlId=\\\"validationCustomUsername\\\">\\n          <Form.Label>Username</Form.Label>\\n          <InputGroup>\\n            <InputGroup.Prepend>\\n              <InputGroup.Text id=\\\"inputGroupPrepend\\\">@</InputGroup.Text>\\n            </InputGroup.Prepend>\\n            <Form.Control\\n              type=\\\"text\\\"\\n              placeholder=\\\"Username\\\"\\n              aria-describedby=\\\"inputGroupPrepend\\\"\\n              required\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              Please choose a username.\\n            </Form.Control.Feedback>\\n          </InputGroup>\\n        </Form.Group>\\n      </Form.Row>\\n      <Form.Row>\\n        <Form.Group as={Col} md=\\\"6\\\" controlId=\\\"validationCustom03\\\">\\n          <Form.Label>City</Form.Label>\\n          <Form.Control type=\\\"text\\\" placeholder=\\\"City\\\" required />\\n          <Form.Control.Feedback type=\\\"invalid\\\">\\n            Please provide a valid city.\\n          </Form.Control.Feedback>\\n        </Form.Group>\\n        <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationCustom04\\\">\\n          <Form.Label>State</Form.Label>\\n          <Form.Control type=\\\"text\\\" placeholder=\\\"State\\\" required />\\n          <Form.Control.Feedback type=\\\"invalid\\\">\\n            Please provide a valid state.\\n          </Form.Control.Feedback>\\n        </Form.Group>\\n        <Form.Group as={Col} md=\\\"3\\\" controlId=\\\"validationCustom05\\\">\\n          <Form.Label>Zip</Form.Label>\\n          <Form.Control type=\\\"text\\\" placeholder=\\\"Zip\\\" required />\\n          <Form.Control.Feedback type=\\\"invalid\\\">\\n            Please provide a valid zip.\\n          </Form.Control.Feedback>\\n        </Form.Group>\\n      </Form.Row>\\n      <Form.Group>\\n        <Form.Check\\n          required\\n          label=\\\"Agree to terms and conditions\\\"\\n          feedback=\\\"You must agree before submitting.\\\"\\n        />\\n      </Form.Group>\\n      <Button type=\\\"submit\\\">Submit form</Button>\\n    </Form>\\n  );\\n}\\n\\nrender(<FormExample />);\\n\"","module.exports = \"<Form>\\n  {['checkbox', 'radio'].map((type) => (\\n    <div key={type} className=\\\"mb-3\\\">\\n      <Form.Check type={type} id={`check-api-${type}`}>\\n        <Form.Check.Input type={type} isValid />\\n        <Form.Check.Label>{`Custom api ${type}`}</Form.Check.Label>\\n        <Form.Control.Feedback type=\\\"valid\\\">You did it!</Form.Control.Feedback>\\n      </Form.Check>\\n    </div>\\n  ))}\\n</Form>;\\n\"","module.exports = \"<>\\n  <Form.Check aria-label=\\\"option 1\\\" />\\n  <Form.Check type=\\\"radio\\\" aria-label=\\\"radio 1\\\" />\\n</>;\\n\"","import { graphql } from 'gatsby';\nimport React from 'react';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport LinkedHeading from '../../components/LinkedHeading';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport FormBasic from '../../examples/Form/Basic';\nimport Check from '../../examples/Form/Check';\nimport CheckApi from '../../examples/Form/CheckApi';\nimport CheckCustom from '../../examples/Form/CheckCustom';\nimport CheckCustomInline from '../../examples/Form/CheckCustomInline';\nimport CheckInline from '../../examples/Form/CheckInline';\nimport FormFile from '../../examples/Form/FormFile';\nimport FormDisabled from '../../examples/Form/FormDisabled';\nimport FormDisabledInputs from '../../examples/Form/FormDisabledInputs';\nimport FormGroup from '../../examples/Form/FormGroup';\nimport FormRow from '../../examples/Form/FormRow';\nimport FormText from '../../examples/Form/FormText';\nimport FormTextInline from '../../examples/Form/FormTextInline';\nimport FormLabelSizing from '../../examples/Form/FormLabelSizing';\nimport GridAutoSizing from '../../examples/Form/GridAutoSizing';\nimport GridAutoSizingCustom from '../../examples/Form/GridAutoSizingCustom';\nimport GridAutoSizingColMix from '../../examples/Form/GridAutoSizingColMix';\nimport GridBasic from '../../examples/Form/GridBasic';\nimport GridColSizes from '../../examples/Form/GridColSizes';\nimport GridComplex from '../../examples/Form/GridComplex';\nimport Horizontal from '../../examples/Form/Horizontal';\nimport Inline from '../../examples/Form/Inline';\nimport InlineCustom from '../../examples/Form/InlineCustom';\nimport InputReadOnly from '../../examples/Form/InputReadOnly';\nimport FormInputSizes from '../../examples/Form/InputSizes';\nimport NoLabels from '../../examples/Form/NoLabels';\nimport Plaintext from '../../examples/Form/Plaintext';\nimport Switch from '../../examples/Form/Switch';\nimport Range from '../../examples/Form/Range';\nimport RangeCustom from '../../examples/Form/RangeCustom';\nimport SelectCustom from '../../examples/Form/SelectCustom';\nimport SelectCustomSize from '../../examples/Form/SelectCustomSize';\nimport SelectCustomHtmlSize from '../../examples/Form/SelectCustomHtmlSize';\nimport SelectSizes from '../../examples/Form/SelectSizes';\nimport File from '../../examples/Form/File';\nimport FileButtonTextHTML from '../../examples/Form/FileButtonTextHTML';\nimport FileButtonTextScss from '../../examples/Form/FileButtonTextScss';\nimport FileApi from '../../examples/Form/FileApi';\nimport FormTextControls from '../../examples/Form/TextControls';\nimport ValidationFormik from '../../examples/Form/ValidationFormik';\nimport ValidationNative from '../../examples/Form/ValidationNative';\nimport ValidationTooltips from '../../examples/Form/ValidationTooltips';\nimport withLayout from '../../withLayout';\n\nexport default withLayout(function FormControlsSection({ data }) {\n  return (\n    <>\n      <LinkedHeading h=\"1\" id=\"forms\">\n        Forms\n      </LinkedHeading>\n      <p>\n        The <code>{'<FormControl>'}</code> component renders a form control with\n        Bootstrap styling. The <code>{'<FormGroup>'}</code> component wraps a\n        form control with proper spacing, along with support for a label, help\n        text, and validation state. To ensure accessibility, set{' '}\n        <code>controlId</code> on <code>{'<FormGroup>'}</code>, and use{' '}\n        <code>{'<FormLabel>'}</code> for the label.\n      </p>\n      <ReactPlayground codeText={FormBasic} />\n      <p>\n        The <code>{'<FormControl>'}</code> component directly renders the{' '}\n        <code>{'<input>'}</code> or other specified component. If you need to\n        access the value of an uncontrolled <code>{'<FormControl>'}</code>,\n        attach a <code>ref</code> to it as you would with an uncontrolled input,\n        then call <code>ReactDOM.findDOMNode(ref)</code> to get the DOM node.\n        You can then interact with that node as you would with any other\n        uncontrolled input.\n      </p>\n      <p>\n        If your application contains a large number of form groups, we recommend\n        building a higher-level component encapsulating a complete field group\n        that renders the label, the control, and any other necessary components.\n        We don't provide this out-of-the-box, because the composition of those\n        field groups is too specific to an individual application to admit a\n        good one-size-fits-all solution.\n      </p>\n      <LinkedHeading h=\"2\" id=\"forms-controls\">\n        Form controls\n      </LinkedHeading>\n      <p>\n        For textual form controls—like <code>input</code>s, <code>select</code>\n        s, and <code>textarea</code>s—use the <code>FormControl</code>{' '}\n        component. FormControl adds some additional styles for general\n        appearance, focus state, sizing, and more.\n      </p>\n      <ReactPlayground codeText={FormTextControls} />\n      <p>\n        For file inputs, use <code>Form.File</code>.\n      </p>\n      <ReactPlayground codeText={FormFile} />\n      <LinkedHeading h=\"3\" id=\"forms-input-sizes\">\n        Sizing\n      </LinkedHeading>\n      <p>\n        Use <code>size</code> on <code>{'<FormControl>'}</code> and{' '}\n        <code>{'<FormLabel>'}</code> to change the size of inputs and labels\n        respectively.\n      </p>\n      <ReactPlayground codeText={FormInputSizes} />\n      <ReactPlayground codeText={SelectSizes} />\n      <LinkedHeading h=\"3\" id=\"forms-input-readonly\">\n        Readonly\n      </LinkedHeading>\n      <p>\n        Add the <code>readOnly</code> prop on an input to prevent modification\n        of the input's value. Read-only inputs appear lighter (just like\n        disabled inputs), but retain the standard cursor.\n      </p>\n      <ReactPlayground codeText={InputReadOnly} />\n      <LinkedHeading h=\"3\" id=\"forms-input-plaintext\">\n        Readonly plain text\n      </LinkedHeading>\n      <p>\n        If you want to have readonly elements in your form styled as plain text,\n        use the <code>plaintext</code> prop on FormControls to remove the\n        default form field styling and preserve the correct margin and padding.\n      </p>\n      <ReactPlayground codeText={Plaintext} />\n      <LinkedHeading h=\"2\" id=\"forms-range\">\n        Range Inputs\n      </LinkedHeading>\n      <ReactPlayground codeText={Range} />\n      <LinkedHeading h=\"2\" id=\"forms-form-check\">\n        Checkboxes and Radios\n      </LinkedHeading>\n      <p>\n        For the non-textual checkbox and radio controls, <code>FormCheck</code>{' '}\n        provides a single component for both types that adds some additional\n        styling and improved layout.\n      </p>\n      <LinkedHeading h=\"3\" id=\"forms-check-stacked\">\n        Default (stacked)\n      </LinkedHeading>\n      <p>\n        By default, any number of checkboxes and radios that are immediate\n        sibling will be vertically stacked and appropriately spaced with\n        FormCheck.\n      </p>\n      <ReactPlayground codeText={Check} />\n      <LinkedHeading h=\"3\" id=\"forms-check-inline\">\n        Inline\n      </LinkedHeading>\n      <p>\n        Group checkboxes or radios on the same horizontal row by adding the{' '}\n        <code>inline</code> prop.\n      </p>\n      <ReactPlayground codeText={CheckInline} />\n      <LinkedHeading h=\"3\" id=\"forms-check-without-labels\">\n        Without labels\n      </LinkedHeading>\n      <p>\n        When you render a FormCheck without a label (no <code>children</code>)\n        some additional styling is applied to keep the inputs from collapsing.{' '}\n        <strong>\n          Remember to add an <code>aria-label</code> when omitting labels!\n        </strong>\n      </p>\n      <ReactPlayground codeText={NoLabels} />\n\n      <LinkedHeading h=\"3\" id=\"forms-check-api\">\n        Customizing FormCheck rendering\n      </LinkedHeading>\n\n      <p>\n        When you need tighter control, or want to customize how the{' '}\n        <code>FormCheck</code> component renders, it may better to use it's\n        constituent parts directly.\n      </p>\n      <p>\n        By provided <code>children</code> to the <code>FormCheck</code> you can\n        forgo the default rendering and handle it yourself. (You can still\n        provide an <code>id</code> to the <code>FormCheck</code> or{' '}\n        <code>FormGroup</code> and have it propagate to the label and input).\n      </p>\n      <ReactPlayground codeText={CheckApi} />\n\n      <LinkedHeading h=\"2\" id=\"forms-layout\">\n        Layout\n      </LinkedHeading>\n      <p>\n        FormControl and FormCheck both apply <code>display: block</code> with{' '}\n        <code>width: 100%</code> to controls, which means they stack vertically\n        by default. Additional components and props can be used to vary this\n        layout on a per-form basis.\n      </p>\n      <LinkedHeading h=\"3\" id=\"forms-layout-group\">\n        Form groups\n      </LinkedHeading>\n      <p>\n        The <code>FormGroup</code> component is the easiest way to add some\n        structure to forms. It provides a flexible container for grouping of\n        labels, controls, optional help text, and form validation messaging. By\n        default it only applies margin-bottom, but it picks up additional styles\n        in <code>{'<Form inline >'}</code> as needed. Use it with{' '}\n        <code>fieldset</code>s, <code>div</code>s, or nearly any other element.\n      </p>\n      <p>\n        You also add the <code>controlId</code> prop to accessibly wire the\n        nested label and input together via the <code>id</code>.\n      </p>\n      <ReactPlayground codeText={FormGroup} />\n      <LinkedHeading h=\"3\" id=\"forms-layout-grid\">\n        Form grid\n      </LinkedHeading>\n      <p>\n        More complex forms can be built using the grid components. Use these for\n        form layouts that require multiple columns, varied widths, and\n        additional alignment options.\n      </p>\n      <ReactPlayground codeText={GridBasic} />\n      <LinkedHeading h=\"4\" id=\"forms-layout-form-row\">\n        Form row\n      </LinkedHeading>\n      <p>\n        You may also swap <code>{'<Row>'}</code> for <code>{'<Form.Row>'}</code>\n        , a variation of the standard grid row that overrides the default column\n        gutters for tighter and more compact layouts.\n      </p>\n      <ReactPlayground codeText={FormRow} />\n      <p>More complex layouts can also be created with the grid system.</p>\n      <ReactPlayground codeText={GridComplex} />\n      <LinkedHeading h=\"4\" id=\"horizontal-forms\">\n        Horizontal form\n      </LinkedHeading>\n      <p>\n        You may also swap <code>{'<Row>'}</code> for <code>{'<Form.Row>'}</code>\n        , a variation of the standard grid row that overrides the default column\n        gutters for tighter and more compact layouts.\n      </p>\n      <ReactPlayground codeText={Horizontal} />\n      <LinkedHeading h=\"4\" id=\"horizontal-forms-label-sizing\">\n        Horizontal form label sizing\n      </LinkedHeading>\n      <p>\n        You can size the <code>{'<FormLabel>'}</code> using the column prop as\n        shown.\n      </p>\n      <ReactPlayground codeText={FormLabelSizing} />\n      <LinkedHeading h=\"4\" id=\"forms-col-sizing\">\n        Column sizing\n      </LinkedHeading>\n      <p>\n        As shown in the previous examples, our grid system allows you to place\n        any number of <code>{'<Col>'}</code>s within a <code>{'<Row>'}</code> or{' '}\n        <code>{'<Form.Row>'}</code>. They'll split the available width equally\n        between them. You may also pick a subset of your columns to take up more\n        or less space, while the remaining <code>{'<Col>'}</code>s equally split\n        the rest, with specific column classes like{' '}\n        <code>{'<Col xs={7}>'}</code>.\n      </p>\n      <ReactPlayground codeText={GridColSizes} />\n      <LinkedHeading h=\"4\" id=\"forms-auto-sizing\">\n        Auto-sizing\n      </LinkedHeading>\n      <p>\n        The example below uses a flexbox utility to vertically center the\n        contents and changes <code>{'<Col>'}</code> to{' '}\n        <code>{'<Col xs=\"auto\">'}</code> so that your columns only take up as\n        much space as needed. Put another way, the column sizes itself based on\n        on the contents.\n      </p>\n      <ReactPlayground codeText={GridAutoSizing} />\n      <p>\n        You can then remix that once again with size-specific column classes.\n      </p>\n      <ReactPlayground codeText={GridAutoSizingColMix} />\n      <p>\n        And of course <a href=\"#forms-custom\">custom form controls</a> are\n        supported.\n      </p>\n      <ReactPlayground codeText={GridAutoSizingCustom} />\n      <LinkedHeading h=\"3\" id=\"forms-inline\">\n        Inline forms\n      </LinkedHeading>\n      <p>\n        Use the <code>inline</code> prop to display a series of labels, form\n        controls, and buttons on a single horizontal row. Form controls within\n        forms vary slightly from their default states.\n      </p>\n      <ul>\n        <li>\n          Controls are <code>display: flex</code>, collapsing any HTML white\n          space and allowing you to provide alignment control with spacing and\n          utilities.\n        </li>\n        <li>\n          Controls and input groups receive <code>width: auto</code> to override\n          the Bootstrap default <code>width: 100%</code>.\n        </li>\n        <li>\n          Controls{' '}\n          <b>only appear inline in viewports that are at least 576px wide</b> to\n          account for narrow viewports on mobile devices.\n        </li>\n      </ul>\n      <p>\n        You may need to manually address the width and alignment of individual\n        form controls with spacing utilities (as shown below). Lastly, be sure\n        to always include a <code>{'<Form.Label>'}</code> with each form\n        control, even if you need to hide it from non-screenreader visitors with\n        the <code>srOnly</code> prop.\n      </p>\n      <ReactPlayground codeText={Inline} />\n      <p>Custom form controls and selects are also supported.</p>\n      <ReactPlayground codeText={InlineCustom} />\n      <Callout>\n        <h5>Alternatives to hidden labels</h5>\n        Assistive technologies such as screen readers will have trouble with\n        your forms if you don’t include a label for every input. For these\n        inline forms, you can hide the labels using the <code>srOnly</code>{' '}\n        prop. There are further alternative methods of providing a label for\n        assistive technologies, such as the <code>aria-label</code>,{' '}\n        <code>aria-labelledby</code> or <code>title</code> attribute. If none of\n        these are present, assistive technologies may resort to using the{' '}\n        <code>placeholder</code> attribute, if present, but note that use of{' '}\n        <code>placeholder</code> as a replacement for other labelling methods is\n        not advised.\n      </Callout>\n      <LinkedHeading h=\"2\" id=\"forms-help-text\">\n        Help text\n      </LinkedHeading>\n      <p>\n        Block-level help text in forms can be created using{' '}\n        <code>{'<Form.Text>'}</code>. Inline help text can be flexibly\n        implemented using any inline HTML element and utility classes like\n        <code>.text-muted</code>.\n      </p>\n      <Callout>\n        <h5>Associating help text with form controls</h5>\n        Help text should be explicitly associated with the form control it\n        relates to using the <code>aria-describedby</code> attribute. This will\n        ensure that assistive technologies—such as screen readers—will announce\n        this help text when the user focuses or enters the control.\n      </Callout>\n      <p>\n        Help text below inputs can be styled with <code>{'<Form.Text>'}</code>.\n        This component includes <code>display: block</code> and adds some top\n        margin for easy spacing from the inputs above.\n      </p>\n      <ReactPlayground codeText={FormText} />\n      <p>\n        Inline text can use any typical inline HTML element (be it a{' '}\n        <code>{'<small>'}</code>, <code>{'<span>'}</code>, or something else)\n        with nothing more than a utility class.\n      </p>\n      <ReactPlayground codeText={FormTextInline} />\n      <LinkedHeading h=\"2\" id=\"forms-disabled\">\n        Disabled forms\n      </LinkedHeading>\n      <p>\n        Add the <code>disabled</code> boolean attribute on an input to prevent\n        user interactions and make it appear lighter.\n      </p>\n      <ReactPlayground codeText={FormDisabledInputs} />\n      <p>\n        Add the <code>disabled</code> attribute to a <code>{'<fieldset>'}</code>{' '}\n        to disable all the controls within.\n      </p>\n      <ReactPlayground codeText={FormDisabled} />\n      <Callout>\n        <h5>Caveat with anchors</h5>\n        By default, browsers will treat all native form controls (\n        <code>{'<input>'}</code>, <code>{'<select>'}</code> and{' '}\n        <code>{'<button>'}</code> elements) inside a{' '}\n        <code>{'<fieldset disabled>'}</code> as disabled, preventing both\n        keyboard and mouse interactions on them. However, if your form also\n        includes <code>{'<a ... class=\"btn btn-*\">'}</code> elements, these will\n        only be given a style of <code>pointer-events: none</code>. As noted in\n        the section about{' '}\n        <a href=\"/components/buttons/#disabled-state\">\n          disabled state for buttons\n        </a>{' '}\n        (and specifically in the sub-section for anchor elements), this CSS\n        property is not yet standardized and isn’t fully supported in Internet\n        Explorer 10, and won’t prevent keyboard users from being able to focus\n        or activate these links. So to be safe, use custom JavaScript to disable\n        such links.\n      </Callout>\n      <Callout theme=\"danger\">\n        <h4>Cross-browser compatibility</h4>\n        While Bootstrap will apply these styles in all browsers, Internet\n        Explorer 11 and below don’t fully support the <code>disabled</code>{' '}\n        attribute on a <code>{'<fieldset>'}</code>. Use custom JavaScript to\n        disable the fieldset in these browsers.\n      </Callout>\n      <LinkedHeading h=\"2\" id=\"forms-validation\">\n        Validation\n      </LinkedHeading>\n      <p>\n        Provide valuable, actionable feedback to your users with form validation\n        feedback.\n      </p>\n      <LinkedHeading h=\"3\" id=\"forms-validation-native\">\n        Native HTML5 form validation\n      </LinkedHeading>\n      <p>\n        For native HTML form validation–\n        <a href=\"https://caniuse.com/#feat=form-validation\">\n          available in all our supported browsers\n        </a>\n        , the <code>:valid</code> and <code>:invalid</code> pseudo selectors are\n        used to apply validation styles as well as display feedback messages.\n      </p>\n      <p>\n        Bootstrap scopes the <code>:valid</code> and <code>:invalid</code>{' '}\n        styles to parent <code>.was-validated</code> class, usually applied to\n        the <code>{'<Form>'}</code> (you can use the <code>validated</code> prop\n        as a shortcut). Otherwise, any required field without a value shows up\n        as invalid on page load. This way, you may choose when to activate them\n        (typically after form submission is attempted).\n      </p>\n      <Callout>\n        Watch out! Browsers provide their own validation UI by default on{' '}\n        <code>form</code>s. You can disable the default UI by adding the HTML{' '}\n        <code>noValidate</code> attribute to your <code>{'<Form>'}</code> or{' '}\n        <code>{'<form>'}</code> element.\n      </Callout>\n      <ReactPlayground codeText={ValidationNative} />\n\n      <LinkedHeading h=\"3\" id=\"forms-validation-libraries\">\n        Form libraries and server-rendered styles\n      </LinkedHeading>\n      <p>\n        It's often beneficial (especially in React) to handle form validation\n        via a library like Formik, or react-formal. In those cases,{' '}\n        <code>isValid</code> and <code>isInvalid</code> props can be added to\n        form controls to manually apply validation styles. Below is a quick\n        example integrating with{' '}\n        <a href=\"https://github.com/jaredpalmer/formik\">Formik</a>.\n      </p>\n      <ReactPlayground codeText={ValidationFormik} />\n\n      <LinkedHeading h=\"3\" id=\"forms-validation-tooltips\">\n        Tooltips\n      </LinkedHeading>\n      <p>\n        If your form layout allows it, you can use the <code>tooltip</code> prop\n        to display validation feedback in a styled tooltip. Be sure to have a\n        parent with <code>position: relative</code> on it for tooltip\n        positioning. In the example below, our column classes have this already,\n        but your project may require an alternative setup.\n      </p>\n      <ReactPlayground codeText={ValidationTooltips} />\n\n      <LinkedHeading h=\"3\" id=\"forms-validation-examples\">\n        Examples\n      </LinkedHeading>\n\n      <LinkedHeading h=\"2\" id=\"forms-custom\">\n        Custom forms\n      </LinkedHeading>\n      <p>\n        For even more customization and cross browser consistency, use our\n        completely custom form elements to replace the browser defaults. They’re\n        built on top of semantic and accessible markup, so they’re solid\n        replacements for any default form control.\n      </p>\n      <LinkedHeading h=\"3\" id=\"forms-custom-checkboxes-and-radios\">\n        Checkboxes and radios\n      </LinkedHeading>\n      <p>\n        Custom checkbox and radio styles are achieved with a resourceful use of\n        the <code>:checked</code> selector and <code>:after</code> pseudo\n        elements, but are Structurally similar to the default{' '}\n        <code>FormCheck</code>. By default the checked and indeterminate icons\n        use embedded svg icons from{' '}\n        <a href=\"https://useiconic.com/open\">Open Iconic</a>.\n      </p>\n\n      <p>\n        Apply Bootstrap's custom elements by adding the <code>custom</code>{' '}\n        prop.\n      </p>\n      <ReactPlayground codeText={CheckCustom} />\n\n      <LinkedHeading h=\"3\" id=\"forms-custom-switch\">\n        Switches\n      </LinkedHeading>\n      <p>\n        A switch has the markup of a custom checkbox but uses{' '}\n        <code>type=\"switch\"</code> to render a toggle switch. Switches also\n        support the same customizable children as <code>{'<FormCheck>'}</code>.\n      </p>\n\n      <ReactPlayground codeText={Switch} />\n      <Callout>\n        You can also use the <code>{'<Form.Switch>'}</code> alias which\n        encapsulates the above, in a very small component wrapper.\n      </Callout>\n\n      <h3>Inline</h3>\n      <ReactPlayground codeText={CheckCustomInline} />\n\n      <LinkedHeading h=\"3\" id=\"forms-custom-select\">\n        Select\n      </LinkedHeading>\n      <p>\n        For the <code>select</code> form control you can pass the{' '}\n        <code>custom</code> prop to get custom styling of the select element.\n        Custom styles are limited to the <code>select</code> initial appearance\n        and cannot modify the <code>option</code> styling due to browser\n        limitations.\n      </p>\n      <ReactPlayground codeText={SelectCustom} />\n      <h4>Sizing</h4>\n      <p>\n        The custom <code>select</code> element supports sizing.\n      </p>\n      <ReactPlayground codeText={SelectCustomSize} />\n      <h4>HTML size</h4>\n      <p>\n        You can also specify the visible options of your <code>select</code>{' '}\n        element.\n      </p>\n      <ReactPlayground codeText={SelectCustomHtmlSize} />\n\n      <LinkedHeading h=\"3\" id=\"forms-custom-range\">\n        Range\n      </LinkedHeading>\n      <p>\n        For the <code>range</code> form control you can pass the{' '}\n        <code>custom</code> prop to get custom styling of the select element.\n        The track (the background) and thumb (the value) are both styled to\n        appear the same across browsers. As only IE and Firefox support\n        “filling” their track from the left or right of the thumb as a means to\n        visually indicate progress, we do not currently support it.\n      </p>\n      <ReactPlayground codeText={RangeCustom} />\n\n      <LinkedHeading h=\"3\" id=\"forms-custom-file\">\n        File\n      </LinkedHeading>\n      <p>A custom styled File uploader.</p>\n      <Callout>\n        The custom <code>FormFile</code> will by default not visibly display\n        your selected file. This requires additional JS. The recommended plugin\n        to animate custom file input is{' '}\n        <a href=\"https://www.npmjs.com/package/bs-custom-file-input\">\n          bs-custom-file-input\n        </a>\n        .\n      </Callout>\n      <ReactPlayground codeText={File} />\n\n      <h4>Translating or customizing the strings with HTML</h4>\n      <p>\n        Bootstrap also provides a way to translate the “Browse” text in HTML\n        with the <code>data-browse</code> attribute which can be added to the\n        custom input label (example in Dutch):\n      </p>\n      <Callout>\n        Note that the <code>data-browse</code> attribute does not to anything\n        unless the <code>custom</code> prop is set.\n      </Callout>\n      <ReactPlayground codeText={FileButtonTextHTML} />\n\n      <h4>Translating or customizing the strings with SCSS</h4>\n      <p>\n        Please refer to the official{' '}\n        <a href=\"https://getbootstrap.com/docs/4.4/components/forms/#translating-or-customizing-the-strings-with-scss\">\n          Bootstrap documentation for translating via SCSS\n        </a>\n        . The <code>lang</code> prop can be used to pass the language.\n      </p>\n      <ReactPlayground codeText={FileButtonTextScss} />\n\n      <h4>Customizing FormFile rendering</h4>\n      <p>\n        When you need tighter control, or want to customize how the{' '}\n        <code>FormFile</code> component renders, it may be better to use it's\n        constituent parts directly.\n      </p>\n      <p>\n        By providing <code>children</code> to the <code>FormFile</code> you can\n        forgo the default rendering and handle it yourself. (You can still\n        provide an <code>id</code> to the <code>FormFile</code> and have it\n        propagate to the label and input).\n      </p>\n      <Callout>\n        <p>\n          When customizing the <code>FormFile</code> rendering it is important\n          to note the order of the <code>label</code> and <code>input</code>{' '}\n          elements.\n        </p>\n        <ul>\n          <li>\n            If you are not setting the <code>custom</code> prop the\n            <code>label</code> should be before the <code>input</code>.\n          </li>\n          <li>\n            If you are setting the custom prop the <code>input</code> element\n            has to be placed before the <code>label</code> or the{' '}\n            <code>buttonText</code> prop will not work.\n          </li>\n        </ul>\n      </Callout>\n      <ReactPlayground codeText={FileApi} />\n\n      <LinkedHeading h=\"2\" id=\"forms-api\">\n        API\n      </LinkedHeading>\n      <ComponentApi metadata={data.Form} />\n      <ComponentApi metadata={data.FormRow} exportedBy={data.Form} />\n      <ComponentApi metadata={data.FormGroup} exportedBy={data.Form} />\n      <ComponentApi metadata={data.FormLabel} exportedBy={data.Form} />\n      <ComponentApi metadata={data.FormText} exportedBy={data.Form} />\n      <ComponentApi metadata={data.FormControl} exportedBy={data.Form} />\n      <ComponentApi metadata={data.Feedback} exportedBy={data.FormControl} />\n      <ComponentApi metadata={data.FormCheck} exportedBy={data.Form} />\n      <ComponentApi\n        metadata={data.FormCheckInput}\n        exportedBy={data.FormCheck}\n      />\n      <ComponentApi\n        metadata={data.FormCheckLabel}\n        exportedBy={data.FormCheck}\n      />\n      <ComponentApi metadata={data.FormFile} exportedBy={data.Form} />\n      <ComponentApi metadata={data.FormFileInput} exportedBy={data.FormFile} />\n      <ComponentApi metadata={data.FormFileLabel} exportedBy={data.FormFile} />\n    </>\n  );\n});\n\nexport const query = graphql`\n  query FormQuery {\n    Form: componentMetadata(displayName: { eq: \"Form\" }) {\n      ...ComponentApi_metadata\n    }\n    FormRow: componentMetadata(displayName: { eq: \"FormRow\" }) {\n      ...ComponentApi_metadata\n    }\n    FormGroup: componentMetadata(displayName: { eq: \"FormGroup\" }) {\n      ...ComponentApi_metadata\n    }\n    FormControl: componentMetadata(displayName: { eq: \"FormControl\" }) {\n      ...ComponentApi_metadata\n    }\n    FormLabel: componentMetadata(displayName: { eq: \"FormLabel\" }) {\n      ...ComponentApi_metadata\n    }\n    FormText: componentMetadata(displayName: { eq: \"FormText\" }) {\n      ...ComponentApi_metadata\n    }\n    FormCheck: componentMetadata(displayName: { eq: \"FormCheck\" }) {\n      ...ComponentApi_metadata\n    }\n    FormFile: componentMetadata(displayName: { eq: \"FormFile\" }) {\n      ...ComponentApi_metadata\n    }\n    FormCheckInput: componentMetadata(displayName: { eq: \"FormCheckInput\" }) {\n      ...ComponentApi_metadata\n    }\n    FormCheckLabel: componentMetadata(displayName: { eq: \"FormCheckLabel\" }) {\n      ...ComponentApi_metadata\n    }\n    Feedback: componentMetadata(displayName: { eq: \"Feedback\" }) {\n      ...ComponentApi_metadata\n    }\n    FormFileInput: componentMetadata(displayName: { eq: \"FormFileInput\" }) {\n      ...ComponentApi_metadata\n    }\n    FormFileLabel: componentMetadata(displayName: { eq: \"FormFileLabel\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\n","module.exports = \"<Form>\\n  <Form.File // prettier-ignore\\n    id=\\\"custom-file\\\"\\n    label=\\\"Custom file input\\\"\\n    custom\\n  />\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Row>\\n    <Col xs={7}>\\n      <Form.Control placeholder=\\\"City\\\" />\\n    </Col>\\n    <Col>\\n      <Form.Control placeholder=\\\"State\\\" />\\n    </Col>\\n    <Col>\\n      <Form.Control placeholder=\\\"Zip\\\" />\\n    </Col>\\n  </Form.Row>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.File // prettier-ignore\\n    id=\\\"custom-file-translate-scss\\\"\\n    label=\\\"Custom file input\\\"\\n    lang=\\\"en\\\"\\n    custom\\n  />\\n</Form>;\\n\"","module.exports = \"<Form>\\n  {['checkbox', 'radio'].map((type) => (\\n    <div key={`custom-${type}`} className=\\\"mb-3\\\">\\n      <Form.Check // prettier-ignore\\n        custom\\n        type={type}\\n        id={`custom-${type}`}\\n        label={`Check this custom ${type}`}\\n      />\\n\\n      <Form.Check\\n        custom\\n        disabled\\n        type={type}\\n        label={`disabled ${type}`}\\n        id={`disabled-custom-${type}`}\\n      />\\n    </div>\\n  ))}\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Group controlId=\\\"formBasicEmail\\\">\\n    <Form.Label>Email address</Form.Label>\\n    <Form.Control type=\\\"email\\\" placeholder=\\\"Enter email\\\" />\\n    <Form.Text className=\\\"text-muted\\\">\\n      We'll never share your email with anyone else.\\n    </Form.Text>\\n  </Form.Group>\\n\\n  <Form.Group controlId=\\\"formBasicPassword\\\">\\n    <Form.Label>Password</Form.Label>\\n    <Form.Control type=\\\"password\\\" placeholder=\\\"Password\\\" />\\n  </Form.Group>\\n  <Form.Group controlId=\\\"formBasicCheckbox\\\">\\n    <Form.Check type=\\\"checkbox\\\" label=\\\"Check me out\\\" />\\n  </Form.Group>\\n  <Button variant=\\\"primary\\\" type=\\\"submit\\\">\\n    Submit\\n  </Button>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <div className=\\\"mb-3\\\">\\n    <Form.File id=\\\"formcheck-api-custom\\\" custom>\\n      <Form.File.Input isValid />\\n      <Form.File.Label data-browse=\\\"Button text\\\">\\n        Custom file input\\n      </Form.File.Label>\\n      <Form.Control.Feedback type=\\\"valid\\\">You did it!</Form.Control.Feedback>\\n    </Form.File>\\n  </div>\\n  <div className=\\\"mb-3\\\">\\n    <Form.File id=\\\"formcheck-api-regular\\\">\\n      <Form.File.Label>Regular file input</Form.File.Label>\\n      <Form.File.Input />\\n    </Form.File>\\n  </div>\\n</Form>;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","module.exports = \"<Form.Group>\\n  <Form.Control as=\\\"select\\\" size=\\\"lg\\\">\\n    <option>Large select</option>\\n  </Form.Control>\\n  <br />\\n  <Form.Control as=\\\"select\\\">\\n    <option>Default select</option>\\n  </Form.Control>\\n  <br />\\n  <Form.Control size=\\\"sm\\\" as=\\\"select\\\">\\n    <option>Small select</option>\\n  </Form.Control>\\n</Form.Group>;\\n\"","module.exports = \"<Form>\\n  <Form.Group controlId=\\\"formBasicRange\\\">\\n    <Form.Label>Range</Form.Label>\\n    <Form.Control type=\\\"range\\\" />\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form inline>\\n  <Form.Group>\\n    <Form.Label htmlFor=\\\"inputPassword6\\\">Password</Form.Label>\\n    <Form.Control\\n      type=\\\"password\\\"\\n      className=\\\"mx-sm-3\\\"\\n      id=\\\"inputPassword6\\\"\\n      aria-describedby=\\\"passwordHelpInline\\\"\\n    />\\n    <Form.Text id=\\\"passwordHelpBlock\\\" muted>\\n      Must be 8-20 characters long.\\n    </Form.Text>\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  {['checkbox', 'radio'].map((type) => (\\n    <div key={`inline-${type}`} className=\\\"mb-3\\\">\\n      <Form.Check inline label=\\\"1\\\" type={type} id={`inline-${type}-1`} />\\n      <Form.Check inline label=\\\"2\\\" type={type} id={`inline-${type}-2`} />\\n      <Form.Check\\n        inline\\n        disabled\\n        label=\\\"3 (disabled)\\\"\\n        type={type}\\n        id={`inline-${type}-3`}\\n      />\\n    </div>\\n  ))}\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Group controlId=\\\"exampleForm.SelectCustom\\\">\\n    <Form.Label>Custom select</Form.Label>\\n    <Form.Control as=\\\"select\\\" custom>\\n      <option>1</option>\\n      <option>2</option>\\n      <option>3</option>\\n      <option>4</option>\\n      <option>5</option>\\n    </Form.Control>\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<>\\n  <Form.Group>\\n    <Form.Label>Disabled input</Form.Label>\\n    <Form.Control placeholder=\\\"Disabled input\\\" disabled />\\n  </Form.Group>\\n  <Form.Group>\\n    <Form.Label>Disabled select menu</Form.Label>\\n    <Form.Control as=\\\"select\\\" disabled>\\n      <option>Disabled select</option>\\n    </Form.Control>\\n  </Form.Group>\\n  <Form.Group>\\n    <Form.Check type=\\\"checkbox\\\" label=\\\"Can't check this\\\" disabled />\\n  </Form.Group>\\n</>;\\n\"","module.exports = \"<Form>\\n  <Form.Row className=\\\"align-items-center\\\">\\n    <Col xs=\\\"auto\\\" className=\\\"my-1\\\">\\n      <Form.Label className=\\\"mr-sm-2\\\" htmlFor=\\\"inlineFormCustomSelect\\\" srOnly>\\n        Preference\\n      </Form.Label>\\n      <Form.Control\\n        as=\\\"select\\\"\\n        className=\\\"mr-sm-2\\\"\\n        id=\\\"inlineFormCustomSelect\\\"\\n        custom\\n      >\\n        <option value=\\\"0\\\">Choose...</option>\\n        <option value=\\\"1\\\">One</option>\\n        <option value=\\\"2\\\">Two</option>\\n        <option value=\\\"3\\\">Three</option>\\n      </Form.Control>\\n    </Col>\\n    <Col xs=\\\"auto\\\" className=\\\"my-1\\\">\\n      <Form.Check\\n        type=\\\"checkbox\\\"\\n        id=\\\"customControlAutosizing\\\"\\n        label=\\\"Remember my preference\\\"\\n        custom\\n      />\\n    </Col>\\n    <Col xs=\\\"auto\\\" className=\\\"my-1\\\">\\n      <Button type=\\\"submit\\\">Submit</Button>\\n    </Col>\\n  </Form.Row>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Group as={Row} controlId=\\\"formPlaintextEmail\\\">\\n    <Form.Label column sm=\\\"2\\\">\\n      Email\\n    </Form.Label>\\n    <Col sm=\\\"10\\\">\\n      <Form.Control plaintext readOnly defaultValue=\\\"email@example.com\\\" />\\n    </Col>\\n  </Form.Group>\\n\\n  <Form.Group as={Row} controlId=\\\"formPlaintextPassword\\\">\\n    <Form.Label column sm=\\\"2\\\">\\n      Password\\n    </Form.Label>\\n    <Col sm=\\\"10\\\">\\n      <Form.Control type=\\\"password\\\" placeholder=\\\"Password\\\" />\\n    </Col>\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Group controlId=\\\"exampleForm.ControlInput1\\\">\\n    <Form.Label>Email address</Form.Label>\\n    <Form.Control type=\\\"email\\\" placeholder=\\\"name@example.com\\\" />\\n  </Form.Group>\\n  <Form.Group controlId=\\\"exampleForm.ControlSelect1\\\">\\n    <Form.Label>Example select</Form.Label>\\n    <Form.Control as=\\\"select\\\">\\n      <option>1</option>\\n      <option>2</option>\\n      <option>3</option>\\n      <option>4</option>\\n      <option>5</option>\\n    </Form.Control>\\n  </Form.Group>\\n  <Form.Group controlId=\\\"exampleForm.ControlSelect2\\\">\\n    <Form.Label>Example multiple select</Form.Label>\\n    <Form.Control as=\\\"select\\\" multiple>\\n      <option>1</option>\\n      <option>2</option>\\n      <option>3</option>\\n      <option>4</option>\\n      <option>5</option>\\n    </Form.Control>\\n  </Form.Group>\\n  <Form.Group controlId=\\\"exampleForm.ControlTextarea1\\\">\\n    <Form.Label>Example textarea</Form.Label>\\n    <Form.Control as=\\\"textarea\\\" rows=\\\"3\\\" />\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form.Group>\\n  <Form.Row>\\n    <Form.Label column=\\\"lg\\\" lg={2}>\\n      Large Text\\n    </Form.Label>\\n    <Col>\\n      <Form.Control size=\\\"lg\\\" type=\\\"text\\\" placeholder=\\\"Large text\\\" />\\n    </Col>\\n  </Form.Row>\\n  <br />\\n  <Form.Row>\\n    <Form.Label column lg={2}>\\n      Normal Text\\n    </Form.Label>\\n    <Col>\\n      <Form.Control type=\\\"text\\\" placeholder=\\\"Normal text\\\" />\\n    </Col>\\n  </Form.Row>\\n  <br />\\n  <Form.Row>\\n    <Form.Label column=\\\"sm\\\" lg={2}>\\n      Small Text\\n    </Form.Label>\\n    <Col>\\n      <Form.Control size=\\\"sm\\\" type=\\\"text\\\" placeholder=\\\"Small text\\\" />\\n    </Col>\\n  </Form.Row>\\n</Form.Group>;\\n\"","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","module.exports = \"<Form.Group>\\n  <Form.Control size=\\\"lg\\\" type=\\\"text\\\" placeholder=\\\"Large text\\\" />\\n  <br />\\n  <Form.Control type=\\\"text\\\" placeholder=\\\"Normal text\\\" />\\n  <br />\\n  <Form.Control size=\\\"sm\\\" type=\\\"text\\\" placeholder=\\\"Small text\\\" />\\n</Form.Group>;\\n\"","module.exports = \"<Form>\\n  {['checkbox', 'radio'].map((type) => (\\n    <div key={`default-${type}`} className=\\\"mb-3\\\">\\n      <Form.Check // prettier-ignore\\n        type={type}\\n        id={`default-${type}`}\\n        label={`default ${type}`}\\n      />\\n\\n      <Form.Check\\n        disabled\\n        type={type}\\n        label={`disabled ${type}`}\\n        id={`disabled-default-${type}`}\\n      />\\n    </div>\\n  ))}\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <fieldset disabled>\\n    <Form.Group>\\n      <Form.Label htmlFor=\\\"disabledTextInput\\\">Disabled input</Form.Label>\\n      <Form.Control id=\\\"disabledTextInput\\\" placeholder=\\\"Disabled input\\\" />\\n    </Form.Group>\\n    <Form.Group>\\n      <Form.Label htmlFor=\\\"disabledSelect\\\">Disabled select menu</Form.Label>\\n      <Form.Control as=\\\"select\\\" id=\\\"disabledSelect\\\">\\n        <option>Disabled select</option>\\n      </Form.Control>\\n    </Form.Group>\\n    <Form.Group>\\n      <Form.Check\\n        type=\\\"checkbox\\\"\\n        id=\\\"disabledFieldsetCheck\\\"\\n        label=\\\"Can't check this\\\"\\n      />\\n    </Form.Group>\\n    <Button type=\\\"submit\\\">Submit</Button>\\n  </fieldset>\\n</Form>;\\n\"","module.exports = \"<Form.Control type=\\\"text\\\" placeholder=\\\"Readonly input here...\\\" readOnly />;\\n\"","module.exports = \"<Form>\\n  <Form.File // prettier-ignore\\n    id=\\\"custom-file-translate-html\\\"\\n    label=\\\"Voeg je document toe\\\"\\n    data-browse=\\\"Bestand kiezen\\\"\\n    custom\\n  />\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Group controlId=\\\"exampleForm.SelectCustomHtmlSize\\\">\\n    <Form.Label>Select with three visible options</Form.Label>\\n    <Form.Control as=\\\"select\\\" htmlSize={3} custom>\\n      <option>1</option>\\n      <option>2</option>\\n      <option>3</option>\\n      <option>4</option>\\n      <option>5</option>\\n    </Form.Control>\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Row className=\\\"align-items-center\\\">\\n    <Col xs=\\\"auto\\\">\\n      <Form.Label htmlFor=\\\"inlineFormInput\\\" srOnly>\\n        Name\\n      </Form.Label>\\n      <Form.Control\\n        className=\\\"mb-2\\\"\\n        id=\\\"inlineFormInput\\\"\\n        placeholder=\\\"Jane Doe\\\"\\n      />\\n    </Col>\\n    <Col xs=\\\"auto\\\">\\n      <Form.Label htmlFor=\\\"inlineFormInputGroup\\\" srOnly>\\n        Username\\n      </Form.Label>\\n      <InputGroup className=\\\"mb-2\\\">\\n        <InputGroup.Prepend>\\n          <InputGroup.Text>@</InputGroup.Text>\\n        </InputGroup.Prepend>\\n        <FormControl id=\\\"inlineFormInputGroup\\\" placeholder=\\\"Username\\\" />\\n      </InputGroup>\\n    </Col>\\n    <Col xs=\\\"auto\\\">\\n      <Form.Check\\n        type=\\\"checkbox\\\"\\n        id=\\\"autoSizingCheck\\\"\\n        className=\\\"mb-2\\\"\\n        label=\\\"Remember me\\\"\\n      />\\n    </Col>\\n    <Col xs=\\\"auto\\\">\\n      <Button type=\\\"submit\\\" className=\\\"mb-2\\\">\\n        Submit\\n      </Button>\\n    </Col>\\n  </Form.Row>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Row>\\n    <Form.Group as={Col} controlId=\\\"formGridEmail\\\">\\n      <Form.Label>Email</Form.Label>\\n      <Form.Control type=\\\"email\\\" placeholder=\\\"Enter email\\\" />\\n    </Form.Group>\\n\\n    <Form.Group as={Col} controlId=\\\"formGridPassword\\\">\\n      <Form.Label>Password</Form.Label>\\n      <Form.Control type=\\\"password\\\" placeholder=\\\"Password\\\" />\\n    </Form.Group>\\n  </Form.Row>\\n\\n  <Form.Group controlId=\\\"formGridAddress1\\\">\\n    <Form.Label>Address</Form.Label>\\n    <Form.Control placeholder=\\\"1234 Main St\\\" />\\n  </Form.Group>\\n\\n  <Form.Group controlId=\\\"formGridAddress2\\\">\\n    <Form.Label>Address 2</Form.Label>\\n    <Form.Control placeholder=\\\"Apartment, studio, or floor\\\" />\\n  </Form.Group>\\n\\n  <Form.Row>\\n    <Form.Group as={Col} controlId=\\\"formGridCity\\\">\\n      <Form.Label>City</Form.Label>\\n      <Form.Control />\\n    </Form.Group>\\n\\n    <Form.Group as={Col} controlId=\\\"formGridState\\\">\\n      <Form.Label>State</Form.Label>\\n      <Form.Control as=\\\"select\\\" defaultValue=\\\"Choose...\\\">\\n        <option>Choose...</option>\\n        <option>...</option>\\n      </Form.Control>\\n    </Form.Group>\\n\\n    <Form.Group as={Col} controlId=\\\"formGridZip\\\">\\n      <Form.Label>Zip</Form.Label>\\n      <Form.Control />\\n    </Form.Group>\\n  </Form.Row>\\n\\n  <Form.Group id=\\\"formGridCheckbox\\\">\\n    <Form.Check type=\\\"checkbox\\\" label=\\\"Check me out\\\" />\\n  </Form.Group>\\n\\n  <Button variant=\\\"primary\\\" type=\\\"submit\\\">\\n    Submit\\n  </Button>\\n</Form>;\\n\"","import React from 'react';\n\nimport ApiLayout from './layouts/ApiLayout';\nimport DefaultLayout from './layouts';\n\nexport default function withLayout(Component) {\n  return (props) => {\n    const { pathname } = props.location;\n    let Layout = DefaultLayout;\n    if (\n      pathname.startsWith('/getting-started') ||\n      pathname.startsWith('/layout') ||\n      pathname.startsWith('/components') ||\n      pathname.startsWith('/utilities')\n    ) {\n      Layout = ApiLayout;\n    }\n\n    return (\n      <Layout location={props.location}>\n        <Component {...props} />\n      </Layout>\n    );\n  };\n}\n","module.exports = \"<Form>\\n  <Form.Group controlId=\\\"formGroupEmail\\\">\\n    <Form.Label>Email address</Form.Label>\\n    <Form.Control type=\\\"email\\\" placeholder=\\\"Enter email\\\" />\\n  </Form.Group>\\n  <Form.Group controlId=\\\"formGroupPassword\\\">\\n    <Form.Label>Password</Form.Label>\\n    <Form.Control type=\\\"password\\\" placeholder=\\\"Password\\\" />\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Row>\\n    <Col>\\n      <Form.Control placeholder=\\\"First name\\\" />\\n    </Col>\\n    <Col>\\n      <Form.Control placeholder=\\\"Last name\\\" />\\n    </Col>\\n  </Row>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Group as={Row} controlId=\\\"formHorizontalEmail\\\">\\n    <Form.Label column sm={2}>\\n      Email\\n    </Form.Label>\\n    <Col sm={10}>\\n      <Form.Control type=\\\"email\\\" placeholder=\\\"Email\\\" />\\n    </Col>\\n  </Form.Group>\\n\\n  <Form.Group as={Row} controlId=\\\"formHorizontalPassword\\\">\\n    <Form.Label column sm={2}>\\n      Password\\n    </Form.Label>\\n    <Col sm={10}>\\n      <Form.Control type=\\\"password\\\" placeholder=\\\"Password\\\" />\\n    </Col>\\n  </Form.Group>\\n  <fieldset>\\n    <Form.Group as={Row}>\\n      <Form.Label as=\\\"legend\\\" column sm={2}>\\n        Radios\\n      </Form.Label>\\n      <Col sm={10}>\\n        <Form.Check\\n          type=\\\"radio\\\"\\n          label=\\\"first radio\\\"\\n          name=\\\"formHorizontalRadios\\\"\\n          id=\\\"formHorizontalRadios1\\\"\\n        />\\n        <Form.Check\\n          type=\\\"radio\\\"\\n          label=\\\"second radio\\\"\\n          name=\\\"formHorizontalRadios\\\"\\n          id=\\\"formHorizontalRadios2\\\"\\n        />\\n        <Form.Check\\n          type=\\\"radio\\\"\\n          label=\\\"third radio\\\"\\n          name=\\\"formHorizontalRadios\\\"\\n          id=\\\"formHorizontalRadios3\\\"\\n        />\\n      </Col>\\n    </Form.Group>\\n  </fieldset>\\n  <Form.Group as={Row} controlId=\\\"formHorizontalCheck\\\">\\n    <Col sm={{ span: 10, offset: 2 }}>\\n      <Form.Check label=\\\"Remember me\\\" />\\n    </Col>\\n  </Form.Group>\\n\\n  <Form.Group as={Row}>\\n    <Col sm={{ span: 10, offset: 2 }}>\\n      <Button type=\\\"submit\\\">Sign in</Button>\\n    </Col>\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Group controlId=\\\"formBasicRangeCustom\\\">\\n    <Form.Label>Range</Form.Label>\\n    <Form.Control type=\\\"range\\\" custom />\\n  </Form.Group>\\n</Form>;\\n\"","module.exports = \"<Form>\\n  <Form.Row>\\n    <Col>\\n      <Form.Control placeholder=\\\"First name\\\" />\\n    </Col>\\n    <Col>\\n      <Form.Control placeholder=\\\"Last name\\\" />\\n    </Col>\\n  </Form.Row>\\n</Form>;\\n\"","module.exports = \"<Form inline>\\n  <Form.Label className=\\\"my-1 mr-2\\\" htmlFor=\\\"inlineFormCustomSelectPref\\\">\\n    Preference\\n  </Form.Label>\\n  <Form.Control\\n    as=\\\"select\\\"\\n    className=\\\"my-1 mr-sm-2\\\"\\n    id=\\\"inlineFormCustomSelectPref\\\"\\n    custom\\n  >\\n    <option value=\\\"0\\\">Choose...</option>\\n    <option value=\\\"1\\\">One</option>\\n    <option value=\\\"2\\\">Two</option>\\n    <option value=\\\"3\\\">Three</option>\\n  </Form.Control>\\n  <Form.Check\\n    type=\\\"checkbox\\\"\\n    className=\\\"my-1 mr-sm-2\\\"\\n    id=\\\"customControlInline\\\"\\n    label=\\\"Remember my preference\\\"\\n    custom\\n  />\\n  <Button type=\\\"submit\\\" className=\\\"my-1\\\">\\n    Submit\\n  </Button>\\n</Form>;\\n\"","module.exports = \"<Form inline>\\n  <Form.Label htmlFor=\\\"inlineFormInputName2\\\" srOnly>\\n    Name\\n  </Form.Label>\\n  <Form.Control\\n    className=\\\"mb-2 mr-sm-2\\\"\\n    id=\\\"inlineFormInputName2\\\"\\n    placeholder=\\\"Jane Doe\\\"\\n  />\\n  <Form.Label htmlFor=\\\"inlineFormInputGroupUsername2\\\" srOnly>\\n    Username\\n  </Form.Label>\\n  <InputGroup className=\\\"mb-2 mr-sm-2\\\">\\n    <InputGroup.Prepend>\\n      <InputGroup.Text>@</InputGroup.Text>\\n    </InputGroup.Prepend>\\n    <FormControl id=\\\"inlineFormInputGroupUsername2\\\" placeholder=\\\"Username\\\" />\\n  </InputGroup>\\n  <Form.Check\\n    type=\\\"checkbox\\\"\\n    className=\\\"mb-2 mr-sm-2\\\"\\n    id=\\\"inlineFormCheck\\\"\\n    label=\\\"Remember me\\\"\\n  />\\n  <Button type=\\\"submit\\\" className=\\\"mb-2\\\">\\n    Submit\\n  </Button>\\n</Form>;\\n\"","module.exports = \"<>\\n  <Form.Label htmlFor=\\\"inputPassword5\\\">Password</Form.Label>\\n  <Form.Control\\n    type=\\\"password\\\"\\n    id=\\\"inputPassword5\\\"\\n    aria-describedby=\\\"passwordHelpBlock\\\"\\n  />\\n  <Form.Text id=\\\"passwordHelpBlock\\\" muted>\\n    Your password must be 8-20 characters long, contain letters and numbers, and\\n    must not contain spaces, special characters, or emoji.\\n  </Form.Text>\\n</>;\\n\"","module.exports = \"<Form>\\n  <Form.Check // prettier-ignore\\n    type=\\\"switch\\\"\\n    id=\\\"custom-switch\\\"\\n    label=\\\"Check this switch\\\"\\n  />\\n  <Form.Check // prettier-ignore\\n    disabled\\n    type=\\\"switch\\\"\\n    label=\\\"disabled switch\\\"\\n    id=\\\"disabled-custom-switch\\\"\\n  />\\n</Form>;\\n\""],"sourceRoot":""}