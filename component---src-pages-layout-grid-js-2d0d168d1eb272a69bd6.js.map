{"version":3,"sources":["webpack:///./src/examples/Grid/ContainerFluidBreakpoint.js","webpack:///./src/examples/Grid/RowColLayout.js","webpack:///./src/examples/Grid/ContainerFluid.js","webpack:///./src/examples/Grid/RowColLayoutColWidthBreakpoint.js","webpack:///./src/examples/Grid/ResponsiveAuto.js","webpack:///./src/examples/Grid/Ordering.js","webpack:///./src/examples/Grid/AutoLayout.js","webpack:///./src/examples/Grid/Responsive.js","webpack:///./src/examples/Grid/AutoLayoutSizing.js","webpack:///./src/examples/Grid/Offsetting.js","webpack:///./src/examples/Grid/Container.js","webpack:///./src/examples/Grid/AutoLayoutVariable.js","webpack:///./src/pages/layout/grid.js","webpack:///./src/withLayout.js","webpack:///./src/examples/Grid/OrderingFirstLast.js"],"names":["module","exports","withLayout","data","h","id","href","codeText","GridContainer","exampleClassName","GridContainerFluid","GridContainerFluidBreakpoint","GridAutoLayout","GridAutoLayoutSizing","GridAutoLayoutVariable","GridResponsiveAuto","GridResponsive","GridOrdering","GridOrderingFirstLast","GridOffsetting","GridRowColLayout","GridRowColLayoutColWidthBreakpoint","metadata","Container","Row","Col","query","Component","props","pathname","location","Layout","DefaultLayout","startsWith","ApiLayout"],"mappings":"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","file":"component---src-pages-layout-grid-js-2d0d168d1eb272a69bd6.js","sourcesContent":["module.exports = \"<Container fluid=\\\"md\\\">\\n  <Row>\\n    <Col>1 of 1</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row xs={2} md={4} lg={6}>\\n    <Col>1 of 2</Col>\\n    <Col>2 of 2</Col>\\n  </Row>\\n  <Row xs={1} md={2}>\\n    <Col>1 of 3</Col>\\n    <Col>2 of 3</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container fluid>\\n  <Row>\\n    <Col>1 of 1</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row md={4}>\\n    <Col>1 of 3</Col>\\n    <Col xs={6}>2 of 3</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col sm={8}>sm=8</Col>\\n    <Col sm={4}>sm=4</Col>\\n  </Row>\\n  <Row>\\n    <Col sm>sm=true</Col>\\n    <Col sm>sm=true</Col>\\n    <Col sm>sm=true</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col xs>First, but unordered</Col>\\n    <Col xs={{ order: 12 }}>Second, but last</Col>\\n    <Col xs={{ order: 1 }}>Third, but second</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col>1 of 2</Col>\\n    <Col>2 of 2</Col>\\n  </Row>\\n  <Row>\\n    <Col>1 of 3</Col>\\n    <Col>2 of 3</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  {/* Stack the columns on mobile by making one full-width and the other half-width */}\\n  <Row>\\n    <Col xs={12} md={8}>\\n      xs=12 md=8\\n    </Col>\\n    <Col xs={6} md={4}>\\n      xs=6 md=4\\n    </Col>\\n  </Row>\\n\\n  {/* Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop */}\\n  <Row>\\n    <Col xs={6} md={4}>\\n      xs=6 md=4\\n    </Col>\\n    <Col xs={6} md={4}>\\n      xs=6 md=4\\n    </Col>\\n    <Col xs={6} md={4}>\\n      xs=6 md=4\\n    </Col>\\n  </Row>\\n\\n  {/* Columns are always 50% wide, on mobile and desktop */}\\n  <Row>\\n    <Col xs={6}>xs=6</Col>\\n    <Col xs={6}>xs=6</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col>1 of 3</Col>\\n    <Col xs={6}>2 of 3 (wider)</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n  <Row>\\n    <Col>1 of 3</Col>\\n    <Col xs={5}>2 of 3 (wider)</Col>\\n    <Col>3 of 3</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col md={4}>md=4</Col>\\n    <Col md={{ span: 4, offset: 4 }}>{`md={{ span: 4, offset: 4 }}`}</Col>\\n  </Row>\\n  <Row>\\n    <Col md={{ span: 3, offset: 3 }}>{`md={{ span: 3, offset: 3 }}`}</Col>\\n    <Col md={{ span: 3, offset: 3 }}>{`md={{ span: 3, offset: 3 }}`}</Col>\\n  </Row>\\n  <Row>\\n    <Col md={{ span: 6, offset: 3 }}>{`md={{ span: 6, offset: 3 }}`}</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row>\\n    <Col>1 of 1</Col>\\n  </Row>\\n</Container>;\\n\"","module.exports = \"<Container>\\n  <Row className=\\\"justify-content-md-center\\\">\\n    <Col xs lg=\\\"2\\\">\\n      1 of 3\\n    </Col>\\n    <Col md=\\\"auto\\\">Variable width content</Col>\\n    <Col xs lg=\\\"2\\\">\\n      3 of 3\\n    </Col>\\n  </Row>\\n  <Row>\\n    <Col>1 of 3</Col>\\n    <Col md=\\\"auto\\\">Variable width content</Col>\\n    <Col xs lg=\\\"2\\\">\\n      3 of 3\\n    </Col>\\n  </Row>\\n</Container>;\\n\"","import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport LinkedHeading from '../../components/LinkedHeading';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport GridContainer from '../../examples/Grid/Container';\nimport GridContainerFluid from '../../examples/Grid/ContainerFluid';\nimport GridContainerFluidBreakpoint from '../../examples/Grid/ContainerFluidBreakpoint';\nimport GridAutoLayout from '../../examples/Grid/AutoLayout';\nimport GridRowColLayout from '../../examples/Grid/RowColLayout';\nimport GridRowColLayoutColWidthBreakpoint from '../../examples/Grid/RowColLayoutColWidthBreakpoint';\nimport GridAutoLayoutSizing from '../../examples/Grid/AutoLayoutSizing';\nimport GridAutoLayoutVariable from '../../examples/Grid/AutoLayoutVariable';\nimport GridOffsetting from '../../examples/Grid/Offsetting';\nimport GridOrdering from '../../examples/Grid/Ordering';\nimport GridOrderingFirstLast from '../../examples/Grid/OrderingFirstLast';\nimport GridResponsive from '../../examples/Grid/Responsive';\nimport GridResponsiveAuto from '../../examples/Grid/ResponsiveAuto';\nimport withLayout from '../../withLayout';\n\nexport default withLayout(function GridSection({ data }) {\n  return (\n    <>\n      <LinkedHeading h=\"1\" id=\"grid\">\n        Grid system\n      </LinkedHeading>\n      <p>\n        Bootstrap’s grid system uses a series of containers, rows, and columns\n        to layout and align content. It’s built with{' '}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\">\n          flexbox\n        </a>{' '}\n        and is fully responsive. Below is an example and an in-depth look at how\n        the grid comes together.{' '}\n      </p>\n      <p>\n        <strong>New to or unfamiliar with flexbox?</strong>{' '}\n        <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background\">\n          Read this CSS Tricks flexbox guide\n        </a>{' '}\n        for background, terminology, guidelines, and code snippets.\n      </p>\n      <LinkedHeading h=\"2\" id=\"container\">\n        Container\n      </LinkedHeading>\n      <p>\n        Containers provide a means to center and horizontally pad your site’s\n        contents. Use <code>Container</code> for a responsive pixel width.\n      </p>\n      <ReactPlayground codeText={GridContainer} exampleClassName=\"show-grid\" />\n      <LinkedHeading h=\"3\" id=\"container-fluid\">\n        Fluid Container\n      </LinkedHeading>\n      <p>\n        You can use <code>{'<Container fluid />'}</code> for width: 100% across\n        all viewport and device sizes.\n      </p>\n      <ReactPlayground\n        codeText={GridContainerFluid}\n        exampleClassName=\"show-grid\"\n      />\n      <p>\n        You can set breakpoints for the <code>fluid</code> prop. Setting it to a\n        breakpoint (<code>sm, md, lg, xl</code>) will set the{' '}\n        <code>Container</code> as fluid until the specified breakpoint.\n      </p>\n      <ReactPlayground\n        codeText={GridContainerFluidBreakpoint}\n        exampleClassName=\"show-grid\"\n      />\n\n      <LinkedHeading h=\"2\" id=\"auto-layout\">\n        Auto-layout columns\n      </LinkedHeading>\n      <p>\n        When no column widths are specified the <code>Col</code> component will\n        render equal width columns\n      </p>\n      <ReactPlayground codeText={GridAutoLayout} exampleClassName=\"show-grid\" />\n\n      <LinkedHeading h=\"3\" id=\"auto-layout-col-sizing\">\n        Setting one column width\n      </LinkedHeading>\n\n      <p>\n        Auto-layout for flexbox grid columns also means you can set the width of\n        one column and have the sibling columns automatically resize around it.\n        You may use predefined grid classes (as shown below), grid mixins, or\n        inline widths. Note that the other columns will resize no matter the\n        width of the center column.\n      </p>\n      <ReactPlayground\n        codeText={GridAutoLayoutSizing}\n        exampleClassName=\"show-grid\"\n      />\n\n      <LinkedHeading h=\"3\" id=\"auto-layout-variable-sizes\">\n        Variable width content\n      </LinkedHeading>\n      <p>\n        Set the column value (for any breakpoint size) to <code>\"auto\"</code> to\n        size columns based on the natural width of their content.\n      </p>\n      <ReactPlayground\n        codeText={GridAutoLayoutVariable}\n        exampleClassName=\"show-grid\"\n      />\n      <LinkedHeading h=\"2\" id=\"responsive-grids\">\n        Responsive grids\n      </LinkedHeading>\n      <p>\n        The <code>Col</code> lets you specify column widths across 5 breakpoint\n        sizes (xs, sm, md, lg, and xl). For every breakpoint, you can specify\n        the amount of columns to span, or set the prop to{' '}\n        <code>{'<Col lg={true} />'}</code> for auto layout widths.\n      </p>\n      <ReactPlayground\n        codeText={GridResponsiveAuto}\n        exampleClassName=\"show-grid\"\n      />\n      <p>\n        You can also mix and match breakpoints to create different grids\n        depending on the screen size.\n      </p>\n      <ReactPlayground codeText={GridResponsive} exampleClassName=\"show-grid\" />\n      <p>\n        The <code>Col</code> breakpoint props also have a more complicated{' '}\n        <code>object</code> prop form:{' '}\n        <code>{`{span: number, order: number, offset: number}`}</code> for\n        specifying offsets and ordering effects.\n      </p>\n\n      <p>\n        You can use the <code>order</code> property to control the{' '}\n        <strong>visual order</strong> of your content.\n      </p>\n      <ReactPlayground codeText={GridOrdering} exampleClassName=\"show-grid\" />\n\n      <p>\n        The <code>order</code> property also supports <code>first</code> (\n        <code>order: -1</code>) and <code>last</code> (\n        <code>order: $columns+1</code>).\n      </p>\n      <ReactPlayground\n        codeText={GridOrderingFirstLast}\n        exampleClassName=\"show-grid\"\n      />\n      <p>\n        For offsetting grid columns you can set an <code>offset</code> value or\n        for a more general layout, use the margin class utilities.\n      </p>\n      <ReactPlayground codeText={GridOffsetting} exampleClassName=\"show-grid\" />\n\n      <LinkedHeading h=\"3\" id=\"row-layout-col-sizing\">\n        Setting column widths in Row\n      </LinkedHeading>\n\n      <p>\n        The <code>Row</code> lets you specify column widths across 5 breakpoint\n        sizes (xs, sm, md, lg, and xl). For every breakpoint, you can specify\n        the amount of columns that will fit next to each other.\n      </p>\n      <ReactPlayground\n        codeText={GridRowColLayout}\n        exampleClassName=\"show-grid\"\n      />\n      <p>\n        Note that <code>Row</code> column widths will override <code>Col</code>{' '}\n        widths set on lower breakpoints when viewed on larger screens. The{' '}\n        <code>{'<Col xs={6} />'}</code> size will be overriden by{' '}\n        <code>{'<Row md={4} />'}</code> on medium and larger screens.\n      </p>\n      <ReactPlayground\n        codeText={GridRowColLayoutColWidthBreakpoint}\n        exampleClassName=\"show-grid\"\n      />\n\n      <LinkedHeading h=\"2\" id=\"grid-props\">\n        API\n      </LinkedHeading>\n\n      <ComponentApi metadata={data.Container} />\n      <ComponentApi metadata={data.Row} />\n      <ComponentApi metadata={data.Col} />\n    </>\n  );\n});\n\nexport const query = graphql`\n  query GridQuery {\n    Container: componentMetadata(displayName: { eq: \"Container\" }) {\n      ...ComponentApi_metadata\n    }\n    Row: componentMetadata(displayName: { eq: \"Row\" }) {\n      ...ComponentApi_metadata\n    }\n    Col: componentMetadata(displayName: { eq: \"Col\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\n","import React from 'react';\n\nimport ApiLayout from './layouts/ApiLayout';\nimport DefaultLayout from './layouts';\n\nexport default function withLayout(Component) {\n  return (props) => {\n    const { pathname } = props.location;\n    let Layout = DefaultLayout;\n    if (\n      pathname.startsWith('/getting-started') ||\n      pathname.startsWith('/layout') ||\n      pathname.startsWith('/components') ||\n      pathname.startsWith('/utilities')\n    ) {\n      Layout = ApiLayout;\n    }\n\n    return (\n      <Layout location={props.location}>\n        <Component {...props} />\n      </Layout>\n    );\n  };\n}\n","module.exports = \"<Container>\\n  <Row>\\n    <Col xs={{ order: 'last' }}>First, but last</Col>\\n    <Col xs>Second, but unordered</Col>\\n    <Col xs={{ order: 'first' }}>Third, but first</Col>\\n  </Row>\\n</Container>;\\n\""],"sourceRoot":""}