{"version":3,"sources":["webpack:///./src/examples/Toast/Dismissible.js","webpack:///./src/examples/Toast/PlacementMulti.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/examples/Toast/Stacking.js","webpack:///./src/pages/components/toasts.mdx","webpack:///./src/examples/Toast/Basic.js","webpack:///./src/components/Callout.js","webpack:///./src/examples/Toast/Autohide.js","webpack:///./src/examples/Toast/Placement.js"],"names":["module","exports","query","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","codeText","ToastBasic","ToastDismissible","ToastStacking","ToastPlacement","ToastPlacementMulti","parentName","ToastAutohide","metadata","data","Toast","ToastHeader","ToastBody","isMDXComponent"],"mappings":"+EAAAA,EAAOC,QAAU,4iD,qBCAjBD,EAAOC,QAAU,81B,qBCCjBD,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,mBCDrKD,EAAOC,QAAU,olB,0XCgBJC,EAAQ,aAaRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,mBAAQ,CACN,GAAM,UADR,UAGA,mBAAGC,UAAU,QAAb,0GAGA,+OACA,mBAAQ,CACN,GAAM,YADR,YAGA,mBAAQ,CACN,GAAM,SADR,SAGA,0NACA,wNACA,cAAC,IAAD,CAAiBC,SAAUC,IAAYH,QAAQ,oBAC/C,mBAAQ,CACN,GAAM,eADR,eAGA,cAAC,IAAD,CAAiBE,SAAUE,IAAkBJ,QAAQ,oBACrD,mBAAQ,CACN,GAAM,YADR,YAGA,sHACA,cAAC,IAAD,CAAiBE,SAAUG,IAAeL,QAAQ,oBAClD,mBAAQ,CACN,GAAM,aADR,aAGA,8IACA,cAAC,IAAD,CAAiBE,SAAUI,IAAgBN,QAAQ,oBACnD,oIACA,cAAC,IAAD,CAAiBE,SAAUK,IAAqBP,QAAQ,oBACxD,mBAAQ,CACN,GAAM,YADR,YAGA,sGAAmF,4BAAYQ,WAAW,KAAvB,YAAnF,6BAAqK,4BAAYA,WAAW,KAAvB,SAArK,gFAAuS,4BAAYA,WAAW,KAAvB,WAAvS,0DACA,cAAC,IAAD,CAAiBN,SAAUO,IAAeT,QAAQ,oBAClD,mBAAQ,CACN,GAAM,OADR,OAGA,cAAC,IAAD,CAAcU,SAAUX,EAAMY,KAAKC,MAAOZ,QAAQ,iBAClD,cAAC,IAAD,CAAcU,SAAUX,EAAMY,KAAKE,YAAab,QAAQ,iBACxD,cAAC,IAAD,CAAcU,SAAUX,EAAMY,KAAKG,UAAWd,QAAQ,kBAM1DH,EAAWkB,gBAAiB,G,mBCnG5BzB,EAAOC,QAAU,gS,kCCCjB,yBAIA,EAAe,UAuCf,IAXA,SAAiB,GAAjB,qCACA,OACA,kEACA,kDACA,mC,mBCrCAD,EAAOC,QAAU,gvB,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-components-toasts-mdx-719424c539125f905098.js","sourcesContent":["module.exports = \"function Example() {\\n  const [showA, setShowA] = useState(true);\\n  const [showB, setShowB] = useState(true);\\n\\n  const toggleShowA = () => setShowA(!showA);\\n  const toggleShowB = () => setShowB(!showB);\\n\\n  return (\\n    <Row>\\n      <Col xs={6}>\\n        <Toast show={showA} onClose={toggleShowA}>\\n          <Toast.Header>\\n            <img\\n              src=\\\"holder.js/20x20?text=%20\\\"\\n              className=\\\"rounded mr-2\\\"\\n              alt=\\\"\\\"\\n            />\\n            <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n            <small>11 mins ago</small>\\n          </Toast.Header>\\n          <Toast.Body>Woohoo, you're reading this text in a Toast!</Toast.Body>\\n        </Toast>\\n      </Col>\\n      <Col xs={6}>\\n        <Button onClick={toggleShowA}>\\n          Toggle Toast <strong>with</strong> Animation\\n        </Button>\\n      </Col>\\n      <Col xs={6} className=\\\"my-1\\\">\\n        <Toast onClose={toggleShowB} show={showB} animation={false}>\\n          <Toast.Header>\\n            <img\\n              src=\\\"holder.js/20x20?text=%20\\\"\\n              className=\\\"rounded mr-2\\\"\\n              alt=\\\"\\\"\\n            />\\n            <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n            <small>11 mins ago</small>\\n          </Toast.Header>\\n          <Toast.Body>Woohoo, you're reading this text in a Toast!</Toast.Body>\\n        </Toast>\\n      </Col>\\n      <Col xs={6}>\\n        <Button onClick={toggleShowB}>\\n          Toggle Toast <strong>without</strong> Animation\\n        </Button>\\n      </Col>\\n    </Row>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"<div\\n  aria-live=\\\"polite\\\"\\n  aria-atomic=\\\"true\\\"\\n  style={{\\n    position: 'relative',\\n    minHeight: '200px',\\n  }}\\n>\\n  <div\\n    style={{\\n      position: 'absolute',\\n      top: 0,\\n      right: 0,\\n    }}\\n  >\\n    <Toast>\\n      <Toast.Header>\\n        <img src=\\\"holder.js/20x20?text=%20\\\" className=\\\"rounded mr-2\\\" alt=\\\"\\\" />\\n        <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n        <small>just now</small>\\n      </Toast.Header>\\n      <Toast.Body>See? Just like this.</Toast.Body>\\n    </Toast>\\n    <Toast>\\n      <Toast.Header>\\n        <img src=\\\"holder.js/20x20?text=%20\\\" className=\\\"rounded mr-2\\\" alt=\\\"\\\" />\\n        <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n        <small>2 seconds ago</small>\\n      </Toast.Header>\\n      <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\\n    </Toast>\\n  </div>\\n</div>;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","module.exports = \"<>\\n  <Toast>\\n    <Toast.Header>\\n      <img src=\\\"holder.js/20x20?text=%20\\\" className=\\\"rounded mr-2\\\" alt=\\\"\\\" />\\n      <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n      <small>just now</small>\\n    </Toast.Header>\\n    <Toast.Body>See? Just like this.</Toast.Body>\\n  </Toast>\\n  <Toast>\\n    <Toast.Header>\\n      <img src=\\\"holder.js/20x20?text=%20\\\" className=\\\"rounded mr-2\\\" alt=\\\"\\\" />\\n      <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n      <small>2 seconds ago</small>\\n    </Toast.Header>\\n    <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\\n  </Toast>\\n</>;\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/Shivprasad/Desktop/opensource/react-bootstrap/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport ToastBasic from '../../examples/Toast/Basic';\nimport ToastDismissible from '../../examples/Toast/Dismissible';\nimport ToastStacking from '../../examples/Toast/Stacking';\nimport ToastPlacement from '../../examples/Toast/Placement';\nimport ToastPlacementMulti from '../../examples/Toast/PlacementMulti';\nimport ToastAutohide from '../../examples/Toast/Autohide';\nexport const query = graphql`\n  query ToastQuery {\n    Toast: componentMetadata(displayName: { eq: \"Toast\" }) {\n      ...ComponentApi_metadata\n    }\n    ToastHeader: componentMetadata(displayName: { eq: \"ToastHeader\" }) {\n      ...ComponentApi_metadata\n    }\n    ToastBody: componentMetadata(displayName: { eq: \"ToastBody\" }) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"toasts\"\n    }}>{`Toasts`}</h1>\n    <p className=\"lead\">\n  Push notifications to your visitors with a toast, a lightweight and easily customizable alert message.\n    </p>\n    <p>{`Toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They’re built with flexbox, so they’re easy to align and position.`}</p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h3>\n    <p>{`To encourage extensible and predictable toasts, we recommend a header and body. Toast headers use display: flex, allowing easy alignment of content thanks to our margin and flexbox utilities.`}</p>\n    <p>{`Toasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your “toasted” content and strongly encourage a dismiss button.`}</p>\n    <ReactPlayground codeText={ToastBasic} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"dismissible\"\n    }}>{`Dismissible`}</h3>\n    <ReactPlayground codeText={ToastDismissible} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"stacking\"\n    }}>{`Stacking`}</h3>\n    <p>{`When you have multiple toasts, we default to vertically stacking them in a readable manner.`}</p>\n    <ReactPlayground codeText={ToastStacking} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"placement\"\n    }}>{`Placement`}</h3>\n    <p>{`Place toasts with custom CSS as you need them. The top right is often used for notifications, as is the top middle.`}</p>\n    <ReactPlayground codeText={ToastPlacement} mdxType=\"ReactPlayground\" />\n    <p>{`For systems that generate more notifications, consider using a wrapping element so they can easily stack.`}</p>\n    <ReactPlayground codeText={ToastPlacementMulti} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"autohide\"\n    }}>{`Autohide`}</h3>\n    <p>{`A Toast can also automatically hide after X milliseconds. For that, use the `}<inlineCode parentName=\"p\">{`autohide`}</inlineCode>{` prop in combination with `}<inlineCode parentName=\"p\">{`delay`}</inlineCode>{` the prop to sepecify the delay. But be aware, that it will only trigger the `}<inlineCode parentName=\"p\">{`onClose`}</inlineCode>{` function, you have to set manually the show property.`}</p>\n    <ReactPlayground codeText={ToastAutohide} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Toast} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.ToastHeader} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.ToastBody} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"<Toast>\\n  <Toast.Header>\\n    <img src=\\\"holder.js/20x20?text=%20\\\" className=\\\"rounded mr-2\\\" alt=\\\"\\\" />\\n    <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n    <small>11 mins ago</small>\\n  </Toast.Header>\\n  <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\\n</Toast>;\\n\"","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","module.exports = \"function Example() {\\n  const [show, setShow] = useState(false);\\n\\n  return (\\n    <Row>\\n      <Col xs={6}>\\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\\n          <Toast.Header>\\n            <img\\n              src=\\\"holder.js/20x20?text=%20\\\"\\n              className=\\\"rounded mr-2\\\"\\n              alt=\\\"\\\"\\n            />\\n            <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n            <small>11 mins ago</small>\\n          </Toast.Header>\\n          <Toast.Body>Woohoo, you're reading this text in a Toast!</Toast.Body>\\n        </Toast>\\n      </Col>\\n      <Col xs={6}>\\n        <Button onClick={() => setShow(true)}>Show Toast</Button>\\n      </Col>\\n    </Row>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"<div\\n  aria-live=\\\"polite\\\"\\n  aria-atomic=\\\"true\\\"\\n  style={{\\n    position: 'relative',\\n    minHeight: '100px',\\n  }}\\n>\\n  <Toast\\n    style={{\\n      position: 'absolute',\\n      top: 0,\\n      right: 0,\\n    }}\\n  >\\n    <Toast.Header>\\n      <img src=\\\"holder.js/20x20?text=%20\\\" className=\\\"rounded mr-2\\\" alt=\\\"\\\" />\\n      <strong className=\\\"mr-auto\\\">Bootstrap</strong>\\n      <small>just now</small>\\n    </Toast.Header>\\n    <Toast.Body>See? Just like this.</Toast.Body>\\n  </Toast>\\n</div>;\\n\""],"sourceRoot":""}