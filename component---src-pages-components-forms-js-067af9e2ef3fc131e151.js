(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"/GzF":function(e,n){e.exports='const { Formik } = formik;\n\nconst schema = yup.object({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  terms: yup.bool().required(),\n});\n\nfunction FormExample() {\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        firstName: \'Mark\',\n        lastName: \'Otto\',\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Form.Row>\n            <Form.Group as={Col} md="4" controlId="validationFormik01">\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                type="text"\n                name="firstName"\n                value={values.firstName}\n                onChange={handleChange}\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormik02">\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                type="text"\n                name="lastName"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n              />\n\n              <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormikUsername">\n              <Form.Label>Username</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type="text"\n                  placeholder="Username"\n                  aria-describedby="inputGroupPrepend"\n                  name="username"\n                  value={values.username}\n                  onChange={handleChange}\n                  isInvalid={!!errors.username}\n                />\n                <Form.Control.Feedback type="invalid">\n                  {errors.username}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} md="6" controlId="validationFormik03">\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="City"\n                name="city"\n                value={values.city}\n                onChange={handleChange}\n                isInvalid={!!errors.city}\n              />\n\n              <Form.Control.Feedback type="invalid">\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="3" controlId="validationFormik04">\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="State"\n                name="state"\n                value={values.state}\n                onChange={handleChange}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type="invalid">\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="3" controlId="validationFormik05">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="Zip"\n                name="zip"\n                value={values.zip}\n                onChange={handleChange}\n                isInvalid={!!errors.zip}\n              />\n\n              <Form.Control.Feedback type="invalid">\n                {errors.zip}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n          <Form.Group>\n            <Form.Check\n              required\n              name="terms"\n              label="Agree to terms and conditions"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              id="validationFormik0"\n            />\n          </Form.Group>\n          <Button type="submit">Submit form</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nrender(<FormExample />);\n'},"/tf6":function(e,n){e.exports='<Form>\n  {[\'checkbox\', \'radio\'].map((type) => (\n    <div key={`custom-inline-${type}`} className="mb-3">\n      <Form.Check\n        custom\n        inline\n        label="1"\n        type={type}\n        id={`custom-inline-${type}-1`}\n      />\n      <Form.Check\n        custom\n        inline\n        label="2"\n        type={type}\n        id={`custom-inline-${type}-2`}\n      />\n      <Form.Check\n        custom\n        inline\n        disabled\n        label="3 (disabled)"\n        type={type}\n        id={`custom-inline-${type}-3`}\n      />\n    </div>\n  ))}\n</Form>;\n'},"0Cdi":function(e,n){e.exports='const { Formik } = formik;\n\nconst schema = yup.object({\n  firstName: yup.string().required(),\n  lastName: yup.string().required(),\n  username: yup.string().required(),\n  city: yup.string().required(),\n  state: yup.string().required(),\n  zip: yup.string().required(),\n  file: yup.string().required(),\n  terms: yup.bool().required(),\n});\n\nfunction FormExample() {\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        firstName: \'Mark\',\n        lastName: \'Otto\',\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          <Form.Row>\n            <Form.Group as={Col} md="4" controlId="validationFormik101">\n              <Form.Label>First name</Form.Label>\n              <Form.Control\n                type="text"\n                name="firstName"\n                value={values.firstName}\n                onChange={handleChange}\n                isValid={touched.firstName && !errors.firstName}\n              />\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormik102">\n              <Form.Label>Last name</Form.Label>\n              <Form.Control\n                type="text"\n                name="lastName"\n                value={values.lastName}\n                onChange={handleChange}\n                isValid={touched.lastName && !errors.lastName}\n              />\n\n              <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="4" controlId="validationFormikUsername2">\n              <Form.Label>Username</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type="text"\n                  placeholder="Username"\n                  aria-describedby="inputGroupPrepend"\n                  name="username"\n                  value={values.username}\n                  onChange={handleChange}\n                  isInvalid={!!errors.username}\n                />\n                <Form.Control.Feedback type="invalid" tooltip>\n                  {errors.username}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} md="6" controlId="validationFormik103">\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="City"\n                name="city"\n                value={values.city}\n                onChange={handleChange}\n                isInvalid={!!errors.city}\n              />\n\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="3" controlId="validationFormik104">\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="State"\n                name="state"\n                value={values.state}\n                onChange={handleChange}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md="3" controlId="validationFormik105">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                type="text"\n                placeholder="Zip"\n                name="zip"\n                value={values.zip}\n                onChange={handleChange}\n                isInvalid={!!errors.zip}\n              />\n\n              <Form.Control.Feedback type="invalid" tooltip>\n                {errors.zip}\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n          <Form.Group>\n            <Form.File\n              className="position-relative"\n              required\n              name="file"\n              label="File"\n              onChange={handleChange}\n              isInvalid={!!errors.file}\n              feedback={errors.file}\n              id="validationFormik107"\n              feedbackTooltip\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Check\n              required\n              name="terms"\n              label="Agree to terms and conditions"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              id="validationFormik106"\n              feedbackTooltip\n            />\n          </Form.Group>\n          <Button type="submit">Submit form</Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nrender(<FormExample />);\n'},"2NC6":function(e,n){e.exports='<Form>\n  <Form.Group controlId="exampleForm.SelectCustomSizeSm">\n    <Form.Label>Custom select Small</Form.Label>\n    <Form.Control as="select" size="sm" custom>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group controlId="exampleForm.SelectCustomSizeLg">\n    <Form.Label>Custom select Large</Form.Label>\n    <Form.Control as="select" size="lg" custom>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n</Form>;\n'},"4hNL":function(e,n){e.exports='<Form>\n  <Form.Row className="align-items-center">\n    <Col sm={3} className="my-1">\n      <Form.Label htmlFor="inlineFormInputName" srOnly>\n        Name\n      </Form.Label>\n      <Form.Control id="inlineFormInputName" placeholder="Jane Doe" />\n    </Col>\n    <Col sm={3} className="my-1">\n      <Form.Label htmlFor="inlineFormInputGroupUsername" srOnly>\n        Username\n      </Form.Label>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>@</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl id="inlineFormInputGroupUsername" placeholder="Username" />\n      </InputGroup>\n    </Col>\n    <Col xs="auto" className="my-1">\n      <Form.Check type="checkbox" id="autoSizingCheck2" label="Remember me" />\n    </Col>\n    <Col xs="auto" className="my-1">\n      <Button type="submit">Submit</Button>\n    </Col>\n  </Form.Row>\n</Form>;\n'},"73xP":function(e,n){e.exports='<Form>\n  <Form.Group>\n    <Form.File id="exampleFormControlFile1" label="Example file input" />\n  </Form.Group>\n</Form>;\n'},"7Yuw":function(e,n){e.exports='function FormExample() {\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return (\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n      <Form.Row>\n        <Form.Group as={Col} md="4" controlId="validationCustom01">\n          <Form.Label>First name</Form.Label>\n          <Form.Control\n            required\n            type="text"\n            placeholder="First name"\n            defaultValue="Mark"\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="4" controlId="validationCustom02">\n          <Form.Label>Last name</Form.Label>\n          <Form.Control\n            required\n            type="text"\n            placeholder="Last name"\n            defaultValue="Otto"\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="4" controlId="validationCustomUsername">\n          <Form.Label>Username</Form.Label>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text id="inputGroupPrepend">@</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control\n              type="text"\n              placeholder="Username"\n              aria-describedby="inputGroupPrepend"\n              required\n            />\n            <Form.Control.Feedback type="invalid">\n              Please choose a username.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Form.Group>\n      </Form.Row>\n      <Form.Row>\n        <Form.Group as={Col} md="6" controlId="validationCustom03">\n          <Form.Label>City</Form.Label>\n          <Form.Control type="text" placeholder="City" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid city.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="3" controlId="validationCustom04">\n          <Form.Label>State</Form.Label>\n          <Form.Control type="text" placeholder="State" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid state.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Col} md="3" controlId="validationCustom05">\n          <Form.Label>Zip</Form.Label>\n          <Form.Control type="text" placeholder="Zip" required />\n          <Form.Control.Feedback type="invalid">\n            Please provide a valid zip.\n          </Form.Control.Feedback>\n        </Form.Group>\n      </Form.Row>\n      <Form.Group>\n        <Form.Check\n          required\n          label="Agree to terms and conditions"\n          feedback="You must agree before submitting."\n        />\n      </Form.Group>\n      <Button type="submit">Submit form</Button>\n    </Form>\n  );\n}\n\nrender(<FormExample />);\n'},"91QH":function(e,n){e.exports="<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={type} className=\"mb-3\">\n      <Form.Check type={type} id={`check-api-${type}`}>\n        <Form.Check.Input type={type} isValid />\n        <Form.Check.Label>{`Custom api ${type}`}</Form.Check.Label>\n        <Form.Control.Feedback type=\"valid\">You did it!</Form.Control.Feedback>\n      </Form.Check>\n    </div>\n  ))}\n</Form>;\n"},ABTg:function(e,n){e.exports='<>\n  <Form.Check aria-label="option 1" />\n  <Form.Check type="radio" aria-label="radio 1" />\n</>;\n'},AkQk:function(e,n,o){"use strict";o.r(n),o.d(n,"query",(function(){return Oe}));var t=o("mXGw"),a=o.n(t),r=o("h55t"),l=o("vXRK"),m=o("+xvc"),i=o("1u5/"),s=o("Jdld"),c=o.n(s),d=o("ljRQ"),u=o.n(d),p=o("91QH"),F=o.n(p),h=o("J32/"),b=o.n(h),f=o("/tf6"),y=o.n(f),C=o("Y2lv"),E=o.n(C),x=o("73xP"),g=o.n(x),v=o("n3XQ"),w=o.n(v),k=o("cgdb"),G=o.n(k),L=o("sOTj"),I=o.n(L),T=o("vc4Z"),R=o.n(T),S=o("zq7G"),z=o.n(S),N=o("WpBG"),B=o.n(N),P=o("ffOz"),q=o.n(P),H=o("pbHP"),A=o.n(H),U=o("dKpd"),O=o.n(U),D=o("4hNL"),V=o.n(D),M=o("u/9a"),Y=o.n(M),$=o("DXq1"),W=o.n($),j=o("pcjb"),Q=o.n(j),Z=o("uDF0"),J=o.n(Z),K=o("ys3m"),X=o.n(K),_=o("xRI8"),ee=o.n(_),ne=o("oWAn"),oe=o.n(ne),te=o("iIos"),ae=o.n(te),re=o("ABTg"),le=o.n(re),me=o("dxsv"),ie=o.n(me),se=o("zyQW"),ce=o.n(se),de=o("Qsvm"),ue=o.n(de),pe=o("v1/c"),Fe=o.n(pe),he=o("c+sU"),be=o.n(he),fe=o("2NC6"),ye=o.n(fe),Ce=o("pFPK"),Ee=o.n(Ce),xe=o("QN7o"),ge=o.n(xe),ve=o("CymT"),we=o.n(ve),ke=o("p7Cg"),Ge=o.n(ke),Le=o("FR85"),Ie=o.n(Le),Te=o("MhjH"),Re=o.n(Te),Se=o("fZum"),ze=o.n(Se),Ne=o("/GzF"),Be=o.n(Ne),Pe=o("7Yuw"),qe=o.n(Pe),He=o("0Cdi"),Ae=o.n(He),Ue=o("r+yI");n.default=Object(Ue.a)((function(e){var n=e.data;return a.a.createElement(a.a.Fragment,null,a.a.createElement(m.default,{h:"1",id:"forms"},"Forms"),a.a.createElement("p",null,"The ",a.a.createElement("code",null,"<FormControl>")," component renders a form control with Bootstrap styling. The ",a.a.createElement("code",null,"<FormGroup>")," component wraps a form control with proper spacing, along with support for a label, help text, and validation state. To ensure accessibility, set"," ",a.a.createElement("code",null,"controlId")," on ",a.a.createElement("code",null,"<FormGroup>"),", and use"," ",a.a.createElement("code",null,"<FormLabel>")," for the label."),a.a.createElement(i.a,{codeText:c.a}),a.a.createElement("p",null,"The ",a.a.createElement("code",null,"<FormControl>")," component directly renders the"," ",a.a.createElement("code",null,"<input>")," or other specified component. If you need to access the value of an uncontrolled ",a.a.createElement("code",null,"<FormControl>"),", attach a ",a.a.createElement("code",null,"ref")," to it as you would with an uncontrolled input, then call ",a.a.createElement("code",null,"ReactDOM.findDOMNode(ref)")," to get the DOM node. You can then interact with that node as you would with any other uncontrolled input."),a.a.createElement("p",null,"If your application contains a large number of form groups, we recommend building a higher-level component encapsulating a complete field group that renders the label, the control, and any other necessary components. We don't provide this out-of-the-box, because the composition of those field groups is too specific to an individual application to admit a good one-size-fits-all solution."),a.a.createElement(m.default,{h:"2",id:"forms-controls"},"Form controls"),a.a.createElement("p",null,"For textual form controls—like ",a.a.createElement("code",null,"input"),"s, ",a.a.createElement("code",null,"select"),"s, and ",a.a.createElement("code",null,"textarea"),"s—use the ",a.a.createElement("code",null,"FormControl")," ","component. FormControl adds some additional styles for general appearance, focus state, sizing, and more."),a.a.createElement(i.a,{codeText:ze.a}),a.a.createElement("p",null,"For file inputs, use ",a.a.createElement("code",null,"Form.File"),"."),a.a.createElement(i.a,{codeText:g.a}),a.a.createElement(m.default,{h:"3",id:"forms-input-sizes"},"Sizing"),a.a.createElement("p",null,"Use ",a.a.createElement("code",null,"size")," on ",a.a.createElement("code",null,"<FormControl>")," and"," ",a.a.createElement("code",null,"<FormLabel>")," to change the size of inputs and labels respectively."),a.a.createElement(i.a,{codeText:ae.a}),a.a.createElement(i.a,{codeText:ge.a}),a.a.createElement(m.default,{h:"3",id:"forms-input-readonly"},"Readonly"),a.a.createElement("p",null,"Add the ",a.a.createElement("code",null,"readOnly")," prop on an input to prevent modification of the input's value. Read-only inputs appear lighter (just like disabled inputs), but retain the standard cursor."),a.a.createElement(i.a,{codeText:oe.a}),a.a.createElement(m.default,{h:"3",id:"forms-input-plaintext"},"Readonly plain text"),a.a.createElement("p",null,"If you want to have readonly elements in your form styled as plain text, use the ",a.a.createElement("code",null,"plaintext")," prop on FormControls to remove the default form field styling and preserve the correct margin and padding."),a.a.createElement(i.a,{codeText:ie.a}),a.a.createElement(m.default,{h:"2",id:"forms-range"},"Range Inputs"),a.a.createElement(i.a,{codeText:ue.a}),a.a.createElement(m.default,{h:"2",id:"forms-form-check"},"Checkboxes and Radios"),a.a.createElement("p",null,"For the non-textual checkbox and radio controls, ",a.a.createElement("code",null,"FormCheck")," ","provides a single component for both types that adds some additional styling and improved layout."),a.a.createElement(m.default,{h:"3",id:"forms-check-stacked"},"Default (stacked)"),a.a.createElement("p",null,"By default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced with FormCheck."),a.a.createElement(i.a,{codeText:u.a}),a.a.createElement(m.default,{h:"3",id:"forms-check-inline"},"Inline"),a.a.createElement("p",null,"Group checkboxes or radios on the same horizontal row by adding the"," ",a.a.createElement("code",null,"inline")," prop."),a.a.createElement(i.a,{codeText:E.a}),a.a.createElement(m.default,{h:"3",id:"forms-check-without-labels"},"Without labels"),a.a.createElement("p",null,"When you render a FormCheck without a label (no ",a.a.createElement("code",null,"children"),") some additional styling is applied to keep the inputs from collapsing."," ",a.a.createElement("strong",null,"Remember to add an ",a.a.createElement("code",null,"aria-label")," when omitting labels!")),a.a.createElement(i.a,{codeText:le.a}),a.a.createElement(m.default,{h:"3",id:"forms-check-api"},"Customizing FormCheck rendering"),a.a.createElement("p",null,"When you need tighter control, or want to customize how the"," ",a.a.createElement("code",null,"FormCheck")," component renders, it may better to use it's constituent parts directly."),a.a.createElement("p",null,"By provided ",a.a.createElement("code",null,"children")," to the ",a.a.createElement("code",null,"FormCheck")," you can forgo the default rendering and handle it yourself. (You can still provide an ",a.a.createElement("code",null,"id")," to the ",a.a.createElement("code",null,"FormCheck")," or"," ",a.a.createElement("code",null,"FormGroup")," and have it propagate to the label and input)."),a.a.createElement(i.a,{codeText:F.a}),a.a.createElement(m.default,{h:"2",id:"forms-layout"},"Layout"),a.a.createElement("p",null,"FormControl and FormCheck both apply ",a.a.createElement("code",null,"display: block")," with"," ",a.a.createElement("code",null,"width: 100%")," to controls, which means they stack vertically by default. Additional components and props can be used to vary this layout on a per-form basis."),a.a.createElement(m.default,{h:"3",id:"forms-layout-group"},"Form groups"),a.a.createElement("p",null,"The ",a.a.createElement("code",null,"FormGroup")," component is the easiest way to add some structure to forms. It provides a flexible container for grouping of labels, controls, optional help text, and form validation messaging. By default it only applies margin-bottom, but it picks up additional styles in ",a.a.createElement("code",null,"<Form inline >")," as needed. Use it with"," ",a.a.createElement("code",null,"fieldset"),"s, ",a.a.createElement("code",null,"div"),"s, or nearly any other element."),a.a.createElement("p",null,"You also add the ",a.a.createElement("code",null,"controlId")," prop to accessibly wire the nested label and input together via the ",a.a.createElement("code",null,"id"),"."),a.a.createElement(i.a,{codeText:I.a}),a.a.createElement(m.default,{h:"3",id:"forms-layout-grid"},"Form grid"),a.a.createElement("p",null,"More complex forms can be built using the grid components. Use these for form layouts that require multiple columns, varied widths, and additional alignment options."),a.a.createElement(i.a,{codeText:Y.a}),a.a.createElement(m.default,{h:"4",id:"forms-layout-form-row"},"Form row"),a.a.createElement("p",null,"You may also swap ",a.a.createElement("code",null,"<Row>")," for ",a.a.createElement("code",null,"<Form.Row>"),", a variation of the standard grid row that overrides the default column gutters for tighter and more compact layouts."),a.a.createElement(i.a,{codeText:R.a}),a.a.createElement("p",null,"More complex layouts can also be created with the grid system."),a.a.createElement(i.a,{codeText:Q.a}),a.a.createElement(m.default,{h:"4",id:"horizontal-forms"},"Horizontal form"),a.a.createElement("p",null,"You may also swap ",a.a.createElement("code",null,"<Row>")," for ",a.a.createElement("code",null,"<Form.Row>"),", a variation of the standard grid row that overrides the default column gutters for tighter and more compact layouts."),a.a.createElement(i.a,{codeText:J.a}),a.a.createElement(m.default,{h:"4",id:"horizontal-forms-label-sizing"},"Horizontal form label sizing"),a.a.createElement("p",null,"You can size the ",a.a.createElement("code",null,"<FormLabel>")," using the column prop as shown."),a.a.createElement(i.a,{codeText:q.a}),a.a.createElement(m.default,{h:"4",id:"forms-col-sizing"},"Column sizing"),a.a.createElement("p",null,"As shown in the previous examples, our grid system allows you to place any number of ",a.a.createElement("code",null,"<Col>"),"s within a ",a.a.createElement("code",null,"<Row>")," or"," ",a.a.createElement("code",null,"<Form.Row>"),". They'll split the available width equally between them. You may also pick a subset of your columns to take up more or less space, while the remaining ",a.a.createElement("code",null,"<Col>"),"s equally split the rest, with specific column classes like"," ",a.a.createElement("code",null,"<Col xs={7}>"),"."),a.a.createElement(i.a,{codeText:W.a}),a.a.createElement(m.default,{h:"4",id:"forms-auto-sizing"},"Auto-sizing"),a.a.createElement("p",null,"The example below uses a flexbox utility to vertically center the contents and changes ",a.a.createElement("code",null,"<Col>")," to"," ",a.a.createElement("code",null,'<Col xs="auto">')," so that your columns only take up as much space as needed. Put another way, the column sizes itself based on on the contents."),a.a.createElement(i.a,{codeText:A.a}),a.a.createElement("p",null,"You can then remix that once again with size-specific column classes."),a.a.createElement(i.a,{codeText:V.a}),a.a.createElement("p",null,"And of course ",a.a.createElement("a",{href:"#forms-custom"},"custom form controls")," are supported."),a.a.createElement(i.a,{codeText:O.a}),a.a.createElement(m.default,{h:"3",id:"forms-inline"},"Inline forms"),a.a.createElement("p",null,"Use the ",a.a.createElement("code",null,"inline")," prop to display a series of labels, form controls, and buttons on a single horizontal row. Form controls within forms vary slightly from their default states."),a.a.createElement("ul",null,a.a.createElement("li",null,"Controls are ",a.a.createElement("code",null,"display: flex"),", collapsing any HTML white space and allowing you to provide alignment control with spacing and utilities."),a.a.createElement("li",null,"Controls and input groups receive ",a.a.createElement("code",null,"width: auto")," to override the Bootstrap default ",a.a.createElement("code",null,"width: 100%"),"."),a.a.createElement("li",null,"Controls"," ",a.a.createElement("b",null,"only appear inline in viewports that are at least 576px wide")," to account for narrow viewports on mobile devices.")),a.a.createElement("p",null,"You may need to manually address the width and alignment of individual form controls with spacing utilities (as shown below). Lastly, be sure to always include a ",a.a.createElement("code",null,"<Form.Label>")," with each form control, even if you need to hide it from non-screenreader visitors with the ",a.a.createElement("code",null,"srOnly")," prop."),a.a.createElement(i.a,{codeText:X.a}),a.a.createElement("p",null,"Custom form controls and selects are also supported."),a.a.createElement(i.a,{codeText:ee.a}),a.a.createElement(r.a,null,a.a.createElement("h5",null,"Alternatives to hidden labels"),"Assistive technologies such as screen readers will have trouble with your forms if you don’t include a label for every input. For these inline forms, you can hide the labels using the ",a.a.createElement("code",null,"srOnly")," ","prop. There are further alternative methods of providing a label for assistive technologies, such as the ",a.a.createElement("code",null,"aria-label"),","," ",a.a.createElement("code",null,"aria-labelledby")," or ",a.a.createElement("code",null,"title")," attribute. If none of these are present, assistive technologies may resort to using the"," ",a.a.createElement("code",null,"placeholder")," attribute, if present, but note that use of"," ",a.a.createElement("code",null,"placeholder")," as a replacement for other labelling methods is not advised."),a.a.createElement(m.default,{h:"2",id:"forms-help-text"},"Help text"),a.a.createElement("p",null,"Block-level help text in forms can be created using"," ",a.a.createElement("code",null,"<Form.Text>"),". Inline help text can be flexibly implemented using any inline HTML element and utility classes like",a.a.createElement("code",null,".text-muted"),"."),a.a.createElement(r.a,null,a.a.createElement("h5",null,"Associating help text with form controls"),"Help text should be explicitly associated with the form control it relates to using the ",a.a.createElement("code",null,"aria-describedby")," attribute. This will ensure that assistive technologies—such as screen readers—will announce this help text when the user focuses or enters the control."),a.a.createElement("p",null,"Help text below inputs can be styled with ",a.a.createElement("code",null,"<Form.Text>"),". This component includes ",a.a.createElement("code",null,"display: block")," and adds some top margin for easy spacing from the inputs above."),a.a.createElement(i.a,{codeText:z.a}),a.a.createElement("p",null,"Inline text can use any typical inline HTML element (be it a"," ",a.a.createElement("code",null,"<small>"),", ",a.a.createElement("code",null,"<span>"),", or something else) with nothing more than a utility class."),a.a.createElement(i.a,{codeText:B.a}),a.a.createElement(m.default,{h:"2",id:"forms-disabled"},"Disabled forms"),a.a.createElement("p",null,"Add the ",a.a.createElement("code",null,"disabled")," boolean attribute on an input to prevent user interactions and make it appear lighter."),a.a.createElement(i.a,{codeText:G.a}),a.a.createElement("p",null,"Add the ",a.a.createElement("code",null,"disabled")," attribute to a ",a.a.createElement("code",null,"<fieldset>")," ","to disable all the controls within."),a.a.createElement(i.a,{codeText:w.a}),a.a.createElement(r.a,null,a.a.createElement("h5",null,"Caveat with anchors"),"By default, browsers will treat all native form controls (",a.a.createElement("code",null,"<input>"),", ",a.a.createElement("code",null,"<select>")," and"," ",a.a.createElement("code",null,"<button>")," elements) inside a"," ",a.a.createElement("code",null,"<fieldset disabled>")," as disabled, preventing both keyboard and mouse interactions on them. However, if your form also includes ",a.a.createElement("code",null,'<a ... class="btn btn-*">')," elements, these will only be given a style of ",a.a.createElement("code",null,"pointer-events: none"),". As noted in the section about"," ",a.a.createElement("a",{href:"/components/buttons/#disabled-state"},"disabled state for buttons")," ","(and specifically in the sub-section for anchor elements), this CSS property is not yet standardized and isn’t fully supported in Internet Explorer 10, and won’t prevent keyboard users from being able to focus or activate these links. So to be safe, use custom JavaScript to disable such links."),a.a.createElement(r.a,{theme:"danger"},a.a.createElement("h4",null,"Cross-browser compatibility"),"While Bootstrap will apply these styles in all browsers, Internet Explorer 11 and below don’t fully support the ",a.a.createElement("code",null,"disabled")," ","attribute on a ",a.a.createElement("code",null,"<fieldset>"),". Use custom JavaScript to disable the fieldset in these browsers."),a.a.createElement(m.default,{h:"2",id:"forms-validation"},"Validation"),a.a.createElement("p",null,"Provide valuable, actionable feedback to your users with form validation feedback."),a.a.createElement(m.default,{h:"3",id:"forms-validation-native"},"Native HTML5 form validation"),a.a.createElement("p",null,"For native HTML form validation–",a.a.createElement("a",{href:"https://caniuse.com/#feat=form-validation"},"available in all our supported browsers"),", the ",a.a.createElement("code",null,":valid")," and ",a.a.createElement("code",null,":invalid")," pseudo selectors are used to apply validation styles as well as display feedback messages."),a.a.createElement("p",null,"Bootstrap scopes the ",a.a.createElement("code",null,":valid")," and ",a.a.createElement("code",null,":invalid")," ","styles to parent ",a.a.createElement("code",null,".was-validated")," class, usually applied to the ",a.a.createElement("code",null,"<Form>")," (you can use the ",a.a.createElement("code",null,"validated")," prop as a shortcut). Otherwise, any required field without a value shows up as invalid on page load. This way, you may choose when to activate them (typically after form submission is attempted)."),a.a.createElement(r.a,null,"Watch out! Browsers provide their own validation UI by default on"," ",a.a.createElement("code",null,"form"),"s. You can disable the default UI by adding the HTML"," ",a.a.createElement("code",null,"noValidate")," attribute to your ",a.a.createElement("code",null,"<Form>")," or"," ",a.a.createElement("code",null,"<form>")," element."),a.a.createElement(i.a,{codeText:qe.a}),a.a.createElement(m.default,{h:"3",id:"forms-validation-libraries"},"Form libraries and server-rendered styles"),a.a.createElement("p",null,"It's often beneficial (especially in React) to handle form validation via a library like Formik, or react-formal. In those cases,"," ",a.a.createElement("code",null,"isValid")," and ",a.a.createElement("code",null,"isInvalid")," props can be added to form controls to manually apply validation styles. Below is a quick example integrating with"," ",a.a.createElement("a",{href:"https://github.com/jaredpalmer/formik"},"Formik"),"."),a.a.createElement(i.a,{codeText:Be.a}),a.a.createElement(m.default,{h:"3",id:"forms-validation-tooltips"},"Tooltips"),a.a.createElement("p",null,"If your form layout allows it, you can use the ",a.a.createElement("code",null,"tooltip")," prop to display validation feedback in a styled tooltip. Be sure to have a parent with ",a.a.createElement("code",null,"position: relative")," on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup."),a.a.createElement(i.a,{codeText:Ae.a}),a.a.createElement(m.default,{h:"3",id:"forms-validation-examples"},"Examples"),a.a.createElement(m.default,{h:"2",id:"forms-custom"},"Custom forms"),a.a.createElement("p",null,"For even more customization and cross browser consistency, use our completely custom form elements to replace the browser defaults. They’re built on top of semantic and accessible markup, so they’re solid replacements for any default form control."),a.a.createElement(m.default,{h:"3",id:"forms-custom-checkboxes-and-radios"},"Checkboxes and radios"),a.a.createElement("p",null,"Custom checkbox and radio styles are achieved with a resourceful use of the ",a.a.createElement("code",null,":checked")," selector and ",a.a.createElement("code",null,":after")," pseudo elements, but are Structurally similar to the default"," ",a.a.createElement("code",null,"FormCheck"),". By default the checked and indeterminate icons use embedded svg icons from"," ",a.a.createElement("a",{href:"https://useiconic.com/open"},"Open Iconic"),"."),a.a.createElement("p",null,"Apply Bootstrap's custom elements by adding the ",a.a.createElement("code",null,"custom")," ","prop."),a.a.createElement(i.a,{codeText:b.a}),a.a.createElement(m.default,{h:"3",id:"forms-custom-switch"},"Switches"),a.a.createElement("p",null,"A switch has the markup of a custom checkbox but uses"," ",a.a.createElement("code",null,'type="switch"')," to render a toggle switch. Switches also support the same customizable children as ",a.a.createElement("code",null,"<FormCheck>"),"."),a.a.createElement(i.a,{codeText:ce.a}),a.a.createElement(r.a,null,"You can also use the ",a.a.createElement("code",null,"<Form.Switch>")," alias which encapsulates the above, in a very small component wrapper."),a.a.createElement("h3",null,"Inline"),a.a.createElement(i.a,{codeText:y.a}),a.a.createElement(m.default,{h:"3",id:"forms-custom-select"},"Select"),a.a.createElement("p",null,"For the ",a.a.createElement("code",null,"select")," form control you can pass the"," ",a.a.createElement("code",null,"custom")," prop to get custom styling of the select element. Custom styles are limited to the ",a.a.createElement("code",null,"select")," initial appearance and cannot modify the ",a.a.createElement("code",null,"option")," styling due to browser limitations."),a.a.createElement(i.a,{codeText:be.a}),a.a.createElement("h4",null,"Sizing"),a.a.createElement("p",null,"The custom ",a.a.createElement("code",null,"select")," element supports sizing."),a.a.createElement(i.a,{codeText:ye.a}),a.a.createElement("h4",null,"HTML size"),a.a.createElement("p",null,"You can also specify the visible options of your ",a.a.createElement("code",null,"select")," ","element."),a.a.createElement(i.a,{codeText:Ee.a}),a.a.createElement(m.default,{h:"3",id:"forms-custom-range"},"Range"),a.a.createElement("p",null,"For the ",a.a.createElement("code",null,"range")," form control you can pass the"," ",a.a.createElement("code",null,"custom")," prop to get custom styling of the select element. The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only IE and Firefox support “filling” their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it."),a.a.createElement(i.a,{codeText:Fe.a}),a.a.createElement(m.default,{h:"3",id:"forms-custom-file"},"File"),a.a.createElement("p",null,"A custom styled File uploader."),a.a.createElement(r.a,null,"The custom ",a.a.createElement("code",null,"FormFile")," will by default not visibly display your selected file. This requires additional JS. The recommended plugin to animate custom file input is"," ",a.a.createElement("a",{href:"https://www.npmjs.com/package/bs-custom-file-input"},"bs-custom-file-input"),"."),a.a.createElement(i.a,{codeText:we.a}),a.a.createElement("h4",null,"Translating or customizing the strings with HTML"),a.a.createElement("p",null,"Bootstrap also provides a way to translate the “Browse” text in HTML with the ",a.a.createElement("code",null,"data-browse")," attribute which can be added to the custom input label (example in Dutch):"),a.a.createElement(r.a,null,"Note that the ",a.a.createElement("code",null,"data-browse")," attribute does not to anything unless the ",a.a.createElement("code",null,"custom")," prop is set."),a.a.createElement(i.a,{codeText:Ge.a}),a.a.createElement("h4",null,"Translating or customizing the strings with SCSS"),a.a.createElement("p",null,"Please refer to the official"," ",a.a.createElement("a",{href:"https://getbootstrap.com/docs/4.4/components/forms/#translating-or-customizing-the-strings-with-scss"},"Bootstrap documentation for translating via SCSS"),". The ",a.a.createElement("code",null,"lang")," prop can be used to pass the language."),a.a.createElement(i.a,{codeText:Ie.a}),a.a.createElement("h4",null,"Customizing FormFile rendering"),a.a.createElement("p",null,"When you need tighter control, or want to customize how the"," ",a.a.createElement("code",null,"FormFile")," component renders, it may be better to use it's constituent parts directly."),a.a.createElement("p",null,"By providing ",a.a.createElement("code",null,"children")," to the ",a.a.createElement("code",null,"FormFile")," you can forgo the default rendering and handle it yourself. (You can still provide an ",a.a.createElement("code",null,"id")," to the ",a.a.createElement("code",null,"FormFile")," and have it propagate to the label and input)."),a.a.createElement(r.a,null,a.a.createElement("p",null,"When customizing the ",a.a.createElement("code",null,"FormFile")," rendering it is important to note the order of the ",a.a.createElement("code",null,"label")," and ",a.a.createElement("code",null,"input")," ","elements."),a.a.createElement("ul",null,a.a.createElement("li",null,"If you are not setting the ",a.a.createElement("code",null,"custom")," prop the",a.a.createElement("code",null,"label")," should be before the ",a.a.createElement("code",null,"input"),"."),a.a.createElement("li",null,"If you are setting the custom prop the ",a.a.createElement("code",null,"input")," element has to be placed before the ",a.a.createElement("code",null,"label")," or the"," ",a.a.createElement("code",null,"buttonText")," prop will not work."))),a.a.createElement(i.a,{codeText:Re.a}),a.a.createElement(m.default,{h:"2",id:"forms-api"},"API"),a.a.createElement(l.a,{metadata:n.Form}),a.a.createElement(l.a,{metadata:n.FormRow,exportedBy:n.Form}),a.a.createElement(l.a,{metadata:n.FormGroup,exportedBy:n.Form}),a.a.createElement(l.a,{metadata:n.FormLabel,exportedBy:n.Form}),a.a.createElement(l.a,{metadata:n.FormText,exportedBy:n.Form}),a.a.createElement(l.a,{metadata:n.FormControl,exportedBy:n.Form}),a.a.createElement(l.a,{metadata:n.Feedback,exportedBy:n.FormControl}),a.a.createElement(l.a,{metadata:n.FormCheck,exportedBy:n.Form}),a.a.createElement(l.a,{metadata:n.FormCheckInput,exportedBy:n.FormCheck}),a.a.createElement(l.a,{metadata:n.FormCheckLabel,exportedBy:n.FormCheck}),a.a.createElement(l.a,{metadata:n.FormFile,exportedBy:n.Form}),a.a.createElement(l.a,{metadata:n.FormFileInput,exportedBy:n.FormFile}),a.a.createElement(l.a,{metadata:n.FormFileLabel,exportedBy:n.FormFile}))}));var Oe="443382152"},CymT:function(e,n){e.exports='<Form>\n  <Form.File // prettier-ignore\n    id="custom-file"\n    label="Custom file input"\n    custom\n  />\n</Form>;\n'},DXq1:function(e,n){e.exports='<Form>\n  <Form.Row>\n    <Col xs={7}>\n      <Form.Control placeholder="City" />\n    </Col>\n    <Col>\n      <Form.Control placeholder="State" />\n    </Col>\n    <Col>\n      <Form.Control placeholder="Zip" />\n    </Col>\n  </Form.Row>\n</Form>;\n'},FR85:function(e,n){e.exports='<Form>\n  <Form.File // prettier-ignore\n    id="custom-file-translate-scss"\n    label="Custom file input"\n    lang="en"\n    custom\n  />\n</Form>;\n'},"J32/":function(e,n){e.exports="<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={`custom-${type}`} className=\"mb-3\">\n      <Form.Check // prettier-ignore\n        custom\n        type={type}\n        id={`custom-${type}`}\n        label={`Check this custom ${type}`}\n      />\n\n      <Form.Check\n        custom\n        disabled\n        type={type}\n        label={`disabled ${type}`}\n        id={`disabled-custom-${type}`}\n      />\n    </div>\n  ))}\n</Form>;\n"},Jdld:function(e,n){e.exports='<Form>\n  <Form.Group controlId="formBasicEmail">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type="email" placeholder="Enter email" />\n    <Form.Text className="text-muted">\n      We\'ll never share your email with anyone else.\n    </Form.Text>\n  </Form.Group>\n\n  <Form.Group controlId="formBasicPassword">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type="password" placeholder="Password" />\n  </Form.Group>\n  <Form.Group controlId="formBasicCheckbox">\n    <Form.Check type="checkbox" label="Check me out" />\n  </Form.Group>\n  <Button variant="primary" type="submit">\n    Submit\n  </Button>\n</Form>;\n'},MhjH:function(e,n){e.exports='<Form>\n  <div className="mb-3">\n    <Form.File id="formcheck-api-custom" custom>\n      <Form.File.Input isValid />\n      <Form.File.Label data-browse="Button text">\n        Custom file input\n      </Form.File.Label>\n      <Form.Control.Feedback type="valid">You did it!</Form.Control.Feedback>\n    </Form.File>\n  </div>\n  <div className="mb-3">\n    <Form.File id="formcheck-api-regular">\n      <Form.File.Label>Regular file input</Form.File.Label>\n      <Form.File.Input />\n    </Form.File>\n  </div>\n</Form>;\n'},Q6D8:function(e,n,o){e.exports={callout:"Callout-styles-module--callout--1_K3h",warning:"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h",danger:"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h"}},QN7o:function(e,n){e.exports='<Form.Group>\n  <Form.Control as="select" size="lg">\n    <option>Large select</option>\n  </Form.Control>\n  <br />\n  <Form.Control as="select">\n    <option>Default select</option>\n  </Form.Control>\n  <br />\n  <Form.Control size="sm" as="select">\n    <option>Small select</option>\n  </Form.Control>\n</Form.Group>;\n'},Qsvm:function(e,n){e.exports='<Form>\n  <Form.Group controlId="formBasicRange">\n    <Form.Label>Range</Form.Label>\n    <Form.Control type="range" />\n  </Form.Group>\n</Form>;\n'},WpBG:function(e,n){e.exports='<Form inline>\n  <Form.Group>\n    <Form.Label htmlFor="inputPassword6">Password</Form.Label>\n    <Form.Control\n      type="password"\n      className="mx-sm-3"\n      id="inputPassword6"\n      aria-describedby="passwordHelpInline"\n    />\n    <Form.Text id="passwordHelpBlock" muted>\n      Must be 8-20 characters long.\n    </Form.Text>\n  </Form.Group>\n</Form>;\n'},Y2lv:function(e,n){e.exports='<Form>\n  {[\'checkbox\', \'radio\'].map((type) => (\n    <div key={`inline-${type}`} className="mb-3">\n      <Form.Check inline label="1" type={type} id={`inline-${type}-1`} />\n      <Form.Check inline label="2" type={type} id={`inline-${type}-2`} />\n      <Form.Check\n        inline\n        disabled\n        label="3 (disabled)"\n        type={type}\n        id={`inline-${type}-3`}\n      />\n    </div>\n  ))}\n</Form>;\n'},"c+sU":function(e,n){e.exports='<Form>\n  <Form.Group controlId="exampleForm.SelectCustom">\n    <Form.Label>Custom select</Form.Label>\n    <Form.Control as="select" custom>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n</Form>;\n'},cgdb:function(e,n){e.exports='<>\n  <Form.Group>\n    <Form.Label>Disabled input</Form.Label>\n    <Form.Control placeholder="Disabled input" disabled />\n  </Form.Group>\n  <Form.Group>\n    <Form.Label>Disabled select menu</Form.Label>\n    <Form.Control as="select" disabled>\n      <option>Disabled select</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group>\n    <Form.Check type="checkbox" label="Can\'t check this" disabled />\n  </Form.Group>\n</>;\n'},dKpd:function(e,n){e.exports='<Form>\n  <Form.Row className="align-items-center">\n    <Col xs="auto" className="my-1">\n      <Form.Label className="mr-sm-2" htmlFor="inlineFormCustomSelect" srOnly>\n        Preference\n      </Form.Label>\n      <Form.Control\n        as="select"\n        className="mr-sm-2"\n        id="inlineFormCustomSelect"\n        custom\n      >\n        <option value="0">Choose...</option>\n        <option value="1">One</option>\n        <option value="2">Two</option>\n        <option value="3">Three</option>\n      </Form.Control>\n    </Col>\n    <Col xs="auto" className="my-1">\n      <Form.Check\n        type="checkbox"\n        id="customControlAutosizing"\n        label="Remember my preference"\n        custom\n      />\n    </Col>\n    <Col xs="auto" className="my-1">\n      <Button type="submit">Submit</Button>\n    </Col>\n  </Form.Row>\n</Form>;\n'},dxsv:function(e,n){e.exports='<Form>\n  <Form.Group as={Row} controlId="formPlaintextEmail">\n    <Form.Label column sm="2">\n      Email\n    </Form.Label>\n    <Col sm="10">\n      <Form.Control plaintext readOnly defaultValue="email@example.com" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row} controlId="formPlaintextPassword">\n    <Form.Label column sm="2">\n      Password\n    </Form.Label>\n    <Col sm="10">\n      <Form.Control type="password" placeholder="Password" />\n    </Col>\n  </Form.Group>\n</Form>;\n'},fZum:function(e,n){e.exports='<Form>\n  <Form.Group controlId="exampleForm.ControlInput1">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type="email" placeholder="name@example.com" />\n  </Form.Group>\n  <Form.Group controlId="exampleForm.ControlSelect1">\n    <Form.Label>Example select</Form.Label>\n    <Form.Control as="select">\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group controlId="exampleForm.ControlSelect2">\n    <Form.Label>Example multiple select</Form.Label>\n    <Form.Control as="select" multiple>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n  <Form.Group controlId="exampleForm.ControlTextarea1">\n    <Form.Label>Example textarea</Form.Label>\n    <Form.Control as="textarea" rows="3" />\n  </Form.Group>\n</Form>;\n'},ffOz:function(e,n){e.exports='<Form.Group>\n  <Form.Row>\n    <Form.Label column="lg" lg={2}>\n      Large Text\n    </Form.Label>\n    <Col>\n      <Form.Control size="lg" type="text" placeholder="Large text" />\n    </Col>\n  </Form.Row>\n  <br />\n  <Form.Row>\n    <Form.Label column lg={2}>\n      Normal Text\n    </Form.Label>\n    <Col>\n      <Form.Control type="text" placeholder="Normal text" />\n    </Col>\n  </Form.Row>\n  <br />\n  <Form.Row>\n    <Form.Label column="sm" lg={2}>\n      Small Text\n    </Form.Label>\n    <Col>\n      <Form.Control size="sm" type="text" placeholder="Small text" />\n    </Col>\n  </Form.Row>\n</Form.Group>;\n'},h55t:function(e,n,o){"use strict";var t=o("mXGw"),a=o.n(t),r=o("Q6D8");n.a=function(e){var n=e.title,o=e.children,t=e.theme;return a.a.createElement("aside",{role:"note",className:r[t||"warning"]},n&&a.a.createElement("header",{className:"h5"},n),a.a.createElement("div",null,o))}},iIos:function(e,n){e.exports='<Form.Group>\n  <Form.Control size="lg" type="text" placeholder="Large text" />\n  <br />\n  <Form.Control type="text" placeholder="Normal text" />\n  <br />\n  <Form.Control size="sm" type="text" placeholder="Small text" />\n</Form.Group>;\n'},ljRQ:function(e,n){e.exports="<Form>\n  {['checkbox', 'radio'].map((type) => (\n    <div key={`default-${type}`} className=\"mb-3\">\n      <Form.Check // prettier-ignore\n        type={type}\n        id={`default-${type}`}\n        label={`default ${type}`}\n      />\n\n      <Form.Check\n        disabled\n        type={type}\n        label={`disabled ${type}`}\n        id={`disabled-default-${type}`}\n      />\n    </div>\n  ))}\n</Form>;\n"},n3XQ:function(e,n){e.exports='<Form>\n  <fieldset disabled>\n    <Form.Group>\n      <Form.Label htmlFor="disabledTextInput">Disabled input</Form.Label>\n      <Form.Control id="disabledTextInput" placeholder="Disabled input" />\n    </Form.Group>\n    <Form.Group>\n      <Form.Label htmlFor="disabledSelect">Disabled select menu</Form.Label>\n      <Form.Control as="select" id="disabledSelect">\n        <option>Disabled select</option>\n      </Form.Control>\n    </Form.Group>\n    <Form.Group>\n      <Form.Check\n        type="checkbox"\n        id="disabledFieldsetCheck"\n        label="Can\'t check this"\n      />\n    </Form.Group>\n    <Button type="submit">Submit</Button>\n  </fieldset>\n</Form>;\n'},oWAn:function(e,n){e.exports='<Form.Control type="text" placeholder="Readonly input here..." readOnly />;\n'},p7Cg:function(e,n){e.exports='<Form>\n  <Form.File // prettier-ignore\n    id="custom-file-translate-html"\n    label="Voeg je document toe"\n    data-browse="Bestand kiezen"\n    custom\n  />\n</Form>;\n'},pFPK:function(e,n){e.exports='<Form>\n  <Form.Group controlId="exampleForm.SelectCustomHtmlSize">\n    <Form.Label>Select with three visible options</Form.Label>\n    <Form.Control as="select" htmlSize={3} custom>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </Form.Control>\n  </Form.Group>\n</Form>;\n'},pbHP:function(e,n){e.exports='<Form>\n  <Form.Row className="align-items-center">\n    <Col xs="auto">\n      <Form.Label htmlFor="inlineFormInput" srOnly>\n        Name\n      </Form.Label>\n      <Form.Control\n        className="mb-2"\n        id="inlineFormInput"\n        placeholder="Jane Doe"\n      />\n    </Col>\n    <Col xs="auto">\n      <Form.Label htmlFor="inlineFormInputGroup" srOnly>\n        Username\n      </Form.Label>\n      <InputGroup className="mb-2">\n        <InputGroup.Prepend>\n          <InputGroup.Text>@</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl id="inlineFormInputGroup" placeholder="Username" />\n      </InputGroup>\n    </Col>\n    <Col xs="auto">\n      <Form.Check\n        type="checkbox"\n        id="autoSizingCheck"\n        className="mb-2"\n        label="Remember me"\n      />\n    </Col>\n    <Col xs="auto">\n      <Button type="submit" className="mb-2">\n        Submit\n      </Button>\n    </Col>\n  </Form.Row>\n</Form>;\n'},pcjb:function(e,n){e.exports='<Form>\n  <Form.Row>\n    <Form.Group as={Col} controlId="formGridEmail">\n      <Form.Label>Email</Form.Label>\n      <Form.Control type="email" placeholder="Enter email" />\n    </Form.Group>\n\n    <Form.Group as={Col} controlId="formGridPassword">\n      <Form.Label>Password</Form.Label>\n      <Form.Control type="password" placeholder="Password" />\n    </Form.Group>\n  </Form.Row>\n\n  <Form.Group controlId="formGridAddress1">\n    <Form.Label>Address</Form.Label>\n    <Form.Control placeholder="1234 Main St" />\n  </Form.Group>\n\n  <Form.Group controlId="formGridAddress2">\n    <Form.Label>Address 2</Form.Label>\n    <Form.Control placeholder="Apartment, studio, or floor" />\n  </Form.Group>\n\n  <Form.Row>\n    <Form.Group as={Col} controlId="formGridCity">\n      <Form.Label>City</Form.Label>\n      <Form.Control />\n    </Form.Group>\n\n    <Form.Group as={Col} controlId="formGridState">\n      <Form.Label>State</Form.Label>\n      <Form.Control as="select" defaultValue="Choose...">\n        <option>Choose...</option>\n        <option>...</option>\n      </Form.Control>\n    </Form.Group>\n\n    <Form.Group as={Col} controlId="formGridZip">\n      <Form.Label>Zip</Form.Label>\n      <Form.Control />\n    </Form.Group>\n  </Form.Row>\n\n  <Form.Group id="formGridCheckbox">\n    <Form.Check type="checkbox" label="Check me out" />\n  </Form.Group>\n\n  <Button variant="primary" type="submit">\n    Submit\n  </Button>\n</Form>;\n'},"r+yI":function(e,n,o){"use strict";o.d(n,"a",(function(){return m}));var t=o("mXGw"),a=o.n(t),r=o("Snbm"),l=o("aArQ");function m(e){return function(n){var o=n.location.pathname,t=l.a;return(o.startsWith("/getting-started")||o.startsWith("/layout")||o.startsWith("/components")||o.startsWith("/utilities"))&&(t=r.a),a.a.createElement(t,{location:n.location},a.a.createElement(e,n))}}},sOTj:function(e,n){e.exports='<Form>\n  <Form.Group controlId="formGroupEmail">\n    <Form.Label>Email address</Form.Label>\n    <Form.Control type="email" placeholder="Enter email" />\n  </Form.Group>\n  <Form.Group controlId="formGroupPassword">\n    <Form.Label>Password</Form.Label>\n    <Form.Control type="password" placeholder="Password" />\n  </Form.Group>\n</Form>;\n'},"u/9a":function(e,n){e.exports='<Form>\n  <Row>\n    <Col>\n      <Form.Control placeholder="First name" />\n    </Col>\n    <Col>\n      <Form.Control placeholder="Last name" />\n    </Col>\n  </Row>\n</Form>;\n'},uDF0:function(e,n){e.exports='<Form>\n  <Form.Group as={Row} controlId="formHorizontalEmail">\n    <Form.Label column sm={2}>\n      Email\n    </Form.Label>\n    <Col sm={10}>\n      <Form.Control type="email" placeholder="Email" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row} controlId="formHorizontalPassword">\n    <Form.Label column sm={2}>\n      Password\n    </Form.Label>\n    <Col sm={10}>\n      <Form.Control type="password" placeholder="Password" />\n    </Col>\n  </Form.Group>\n  <fieldset>\n    <Form.Group as={Row}>\n      <Form.Label as="legend" column sm={2}>\n        Radios\n      </Form.Label>\n      <Col sm={10}>\n        <Form.Check\n          type="radio"\n          label="first radio"\n          name="formHorizontalRadios"\n          id="formHorizontalRadios1"\n        />\n        <Form.Check\n          type="radio"\n          label="second radio"\n          name="formHorizontalRadios"\n          id="formHorizontalRadios2"\n        />\n        <Form.Check\n          type="radio"\n          label="third radio"\n          name="formHorizontalRadios"\n          id="formHorizontalRadios3"\n        />\n      </Col>\n    </Form.Group>\n  </fieldset>\n  <Form.Group as={Row} controlId="formHorizontalCheck">\n    <Col sm={{ span: 10, offset: 2 }}>\n      <Form.Check label="Remember me" />\n    </Col>\n  </Form.Group>\n\n  <Form.Group as={Row}>\n    <Col sm={{ span: 10, offset: 2 }}>\n      <Button type="submit">Sign in</Button>\n    </Col>\n  </Form.Group>\n</Form>;\n'},"v1/c":function(e,n){e.exports='<Form>\n  <Form.Group controlId="formBasicRangeCustom">\n    <Form.Label>Range</Form.Label>\n    <Form.Control type="range" custom />\n  </Form.Group>\n</Form>;\n'},vc4Z:function(e,n){e.exports='<Form>\n  <Form.Row>\n    <Col>\n      <Form.Control placeholder="First name" />\n    </Col>\n    <Col>\n      <Form.Control placeholder="Last name" />\n    </Col>\n  </Form.Row>\n</Form>;\n'},xRI8:function(e,n){e.exports='<Form inline>\n  <Form.Label className="my-1 mr-2" htmlFor="inlineFormCustomSelectPref">\n    Preference\n  </Form.Label>\n  <Form.Control\n    as="select"\n    className="my-1 mr-sm-2"\n    id="inlineFormCustomSelectPref"\n    custom\n  >\n    <option value="0">Choose...</option>\n    <option value="1">One</option>\n    <option value="2">Two</option>\n    <option value="3">Three</option>\n  </Form.Control>\n  <Form.Check\n    type="checkbox"\n    className="my-1 mr-sm-2"\n    id="customControlInline"\n    label="Remember my preference"\n    custom\n  />\n  <Button type="submit" className="my-1">\n    Submit\n  </Button>\n</Form>;\n'},ys3m:function(e,n){e.exports='<Form inline>\n  <Form.Label htmlFor="inlineFormInputName2" srOnly>\n    Name\n  </Form.Label>\n  <Form.Control\n    className="mb-2 mr-sm-2"\n    id="inlineFormInputName2"\n    placeholder="Jane Doe"\n  />\n  <Form.Label htmlFor="inlineFormInputGroupUsername2" srOnly>\n    Username\n  </Form.Label>\n  <InputGroup className="mb-2 mr-sm-2">\n    <InputGroup.Prepend>\n      <InputGroup.Text>@</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl id="inlineFormInputGroupUsername2" placeholder="Username" />\n  </InputGroup>\n  <Form.Check\n    type="checkbox"\n    className="mb-2 mr-sm-2"\n    id="inlineFormCheck"\n    label="Remember me"\n  />\n  <Button type="submit" className="mb-2">\n    Submit\n  </Button>\n</Form>;\n'},zq7G:function(e,n){e.exports='<>\n  <Form.Label htmlFor="inputPassword5">Password</Form.Label>\n  <Form.Control\n    type="password"\n    id="inputPassword5"\n    aria-describedby="passwordHelpBlock"\n  />\n  <Form.Text id="passwordHelpBlock" muted>\n    Your password must be 8-20 characters long, contain letters and numbers, and\n    must not contain spaces, special characters, or emoji.\n  </Form.Text>\n</>;\n'},zyQW:function(e,n){e.exports='<Form>\n  <Form.Check // prettier-ignore\n    type="switch"\n    id="custom-switch"\n    label="Check this switch"\n  />\n  <Form.Check // prettier-ignore\n    disabled\n    type="switch"\n    label="disabled switch"\n    id="disabled-custom-switch"\n  />\n</Form>;\n'}}]);
//# sourceMappingURL=component---src-pages-components-forms-js-067af9e2ef3fc131e151.js.map