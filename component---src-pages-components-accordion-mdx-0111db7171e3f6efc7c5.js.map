{"version":3,"sources":["webpack:///./src/examples/Accordion/CustomToggle.js","webpack:///./src/examples/Accordion/ContextAwareToggle.js","webpack:///./src/examples/Accordion/EntireHeaderClickable.js","webpack:///./src/components/Callout-styles.module.scss","webpack:///./src/pages/components/accordion.mdx","webpack:///./src/components/Callout.js","webpack:///./src/examples/Accordion/AllCollapse.js","webpack:///./src/examples/Accordion/Basic.js"],"names":["module","exports","query","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","codeText","Basic","parentName","AllCollapse","EntireHeaderClickable","CustomToggle","ContextAwareToggle","metadata","data","Accordion","AccordionToggle","exportedBy","AccordionCollapse","isMDXComponent"],"mappings":"+EAAAA,EAAOC,QAAU,0+B,qBCAjBD,EAAOC,QAAU,irC,mBCAjBD,EAAOC,QAAU,6gB,qBCCjBD,EAAOC,QAAU,CAAC,QAAU,wCAAwC,QAAU,8EAA8E,OAAS,+E,qWCcxJC,EAAQ,YAeRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAM5E,mBAAQ,CACN,GAAM,aADR,aAGA,mBAAGC,UAAU,QAAb,oFAIA,mBAAQ,CACN,GAAM,YADR,YAGA,0MAEA,mBAAQ,CACN,GAAM,iBADR,iBAGA,cAAC,IAAD,CAAiBC,SAAUC,IAAOH,QAAQ,oBAC1C,mBAAQ,CACN,GAAM,yBADR,yBAGA,sHAAmG,4BAAYI,WAAW,KAAvB,oBAAnG,YAA4K,4BAAYA,WAAW,KAAvB,aAA5K,KACA,cAAC,IAAD,CAAiBF,SAAUG,IAAaL,QAAQ,oBAChD,mBAAQ,CACN,GAAM,2BADR,2BAGA,oMAEA,cAAC,IAAD,CAAiBE,SAAUI,IAAuBN,QAAQ,oBAC1D,mBAAQ,CACN,GAAM,iBADR,iBAGA,uFAAoE,4BAAYI,WAAW,KAAvB,sBAApE,sCACA,cAAC,IAAD,CAAiBF,SAAUK,IAAcP,QAAQ,oBACjD,mBAAQ,CACN,GAAM,0CADR,0CAGA,wNAC8F,4BAAYI,WAAW,KAAvB,sBAD9F,UAEA,cAAC,IAAD,CAAiBF,SAAUM,IAAoBR,QAAQ,oBACvD,mBAAQ,CACN,GAAM,OADR,OAGA,cAAC,IAAD,CAAcS,SAAUV,EAAMW,KAAKC,UAAWX,QAAQ,iBACtD,cAAC,IAAD,CAAcS,SAAUV,EAAMW,KAAKE,gBAAiBC,WAAYd,EAAMW,KAAKC,UAAWX,QAAQ,iBAC9F,cAAC,IAAD,CAAcS,SAAUV,EAAMW,KAAKI,kBAAmBD,WAAYd,EAAMW,KAAKC,UAAWX,QAAQ,iBAChG,mBAAQ,CACN,GAAM,sBADR,sBAGA,yBAAK,oCAAMI,WAAW,OAAU,CAC5B,UAAa,gBADZ,gJAWTP,EAAWkB,gBAAiB,G,kCC7G5B,yBAIA,EAAe,UAuCf,IAXA,SAAiB,GAAjB,qCACA,OACA,kEACA,kDACA,mC,mBCrCAzB,EAAOC,QAAU,smB,mBCAjBD,EAAOC,QAAU","file":"component---src-pages-components-accordion-mdx-0111db7171e3f6efc7c5.js","sourcesContent":["module.exports = \"function CustomToggle({ children, eventKey }) {\\n  const decoratedOnClick = useAccordionToggle(eventKey, () =>\\n    console.log('totally custom!'),\\n  );\\n\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      style={{ backgroundColor: 'pink' }}\\n      onClick={decoratedOnClick}\\n    >\\n      {children}\\n    </button>\\n  );\\n}\\n\\nfunction Example() {\\n  return (\\n    <Accordion defaultActiveKey=\\\"0\\\">\\n      <Card>\\n        <Card.Header>\\n          <CustomToggle eventKey=\\\"0\\\">Click me!</CustomToggle>\\n        </Card.Header>\\n        <Accordion.Collapse eventKey=\\\"0\\\">\\n          <Card.Body>Hello! I'm the body</Card.Body>\\n        </Accordion.Collapse>\\n      </Card>\\n      <Card>\\n        <Card.Header>\\n          <CustomToggle eventKey=\\\"1\\\">Click me!</CustomToggle>\\n        </Card.Header>\\n        <Accordion.Collapse eventKey=\\\"1\\\">\\n          <Card.Body>Hello! I'm another body</Card.Body>\\n        </Accordion.Collapse>\\n      </Card>\\n    </Accordion>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"function ContextAwareToggle({ children, eventKey, callback }) {\\n  const currentEventKey = useContext(AccordionContext);\\n\\n  const decoratedOnClick = useAccordionToggle(\\n    eventKey,\\n    () => callback && callback(eventKey),\\n  );\\n\\n  const isCurrentEventKey = currentEventKey === eventKey;\\n\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      style={{ backgroundColor: isCurrentEventKey ? 'pink' : 'lavender' }}\\n      onClick={decoratedOnClick}\\n    >\\n      {children}\\n    </button>\\n  );\\n}\\n\\nfunction Example() {\\n  return (\\n    <Accordion defaultActiveKey=\\\"0\\\">\\n      <Card>\\n        <Card.Header>\\n          <ContextAwareToggle eventKey=\\\"0\\\">Click me!</ContextAwareToggle>\\n        </Card.Header>\\n        <Accordion.Collapse eventKey=\\\"0\\\">\\n          <Card.Body>Hello! I'm the body</Card.Body>\\n        </Accordion.Collapse>\\n      </Card>\\n      <Card>\\n        <Card.Header>\\n          <ContextAwareToggle eventKey=\\\"1\\\">Click me!</ContextAwareToggle>\\n        </Card.Header>\\n        <Accordion.Collapse eventKey=\\\"1\\\">\\n          <Card.Body>Hello! I'm another body</Card.Body>\\n        </Accordion.Collapse>\\n      </Card>\\n    </Accordion>\\n  );\\n}\\n\\nrender(<Example />);\\n\"","module.exports = \"<Accordion defaultActiveKey=\\\"0\\\">\\n  <Card>\\n    <Accordion.Toggle as={Card.Header} eventKey=\\\"0\\\">\\n      Click me!\\n    </Accordion.Toggle>\\n    <Accordion.Collapse eventKey=\\\"0\\\">\\n      <Card.Body>Hello! I'm the body</Card.Body>\\n    </Accordion.Collapse>\\n  </Card>\\n  <Card>\\n    <Accordion.Toggle as={Card.Header} eventKey=\\\"1\\\">\\n      Click me!\\n    </Accordion.Toggle>\\n    <Accordion.Collapse eventKey=\\\"1\\\">\\n      <Card.Body>Hello! I'm another body</Card.Body>\\n    </Accordion.Collapse>\\n  </Card>\\n</Accordion>;\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"callout\":\"Callout-styles-module--callout--1_K3h\",\"warning\":\"Callout-styles-module--warning--39Zw- Callout-styles-module--callout--1_K3h\",\"danger\":\"Callout-styles-module--danger--19388 Callout-styles-module--callout--1_K3h\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/Shivprasad/Desktop/opensource/react-bootstrap/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport Callout from '../../components/Callout';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport Basic from '../../examples/Accordion/Basic';\nimport AllCollapse from '../../examples/Accordion/AllCollapse';\nimport EntireHeaderClickable from '../../examples/Accordion/EntireHeaderClickable';\nimport CustomToggle from '../../examples/Accordion/CustomToggle.js';\nimport ContextAwareToggle from '../../examples/Accordion/ContextAwareToggle.js';\nexport const query = graphql`\n  query AccordionQuery {\n    Accordion: componentMetadata(displayName: { eq: \"Accordion\" }) {\n      ...ComponentApi_metadata\n    }\n    AccordionToggle: componentMetadata(displayName: { eq: \"AccordionToggle\" }) {\n      ...ComponentApi_metadata\n    }\n    AccordionCollapse: componentMetadata(\n      displayName: { eq: \"AccordionCollapse\" }\n    ) {\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"accordion\"\n    }}>{`Accordion`}</h1>\n    <p className=\"lead\">\n  Accordions provide a way to restrict Card components to only open one at a\n  time.\n    </p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Accordions use Card components to provide styling of the Accordion components.\nUse AccordionToggle to provide a button that switches between each AccordionCollapse component.`}</p>\n    <h3 {...{\n      \"id\": \"basic-example\"\n    }}>{`Basic Example`}</h3>\n    <ReactPlayground codeText={Basic} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"fully-collapsed-state\"\n    }}>{`Fully Collapsed State`}</h3>\n    <p>{`If you want your Accordion to start in a fully-collapsed state, then simply don't pass in a `}<inlineCode parentName=\"p\">{`defaultActiveKey`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`Accordion`}</inlineCode>{`.`}</p>\n    <ReactPlayground codeText={AllCollapse} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"entire-header-clickable\"\n    }}>{`Entire Header Clickable`}</h3>\n    <p>{`Each of the Card components in the Accordion can have their entire header clickable, by setting the AccordionToggle's\nunderlying component to be a CardHeader component.`}</p>\n    <ReactPlayground codeText={EntireHeaderClickable} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"custom-toggle\"\n    }}>{`Custom Toggle`}</h3>\n    <p>{`You can now hook into the Accordion toggle functionality via `}<inlineCode parentName=\"p\">{`useAccordionToggle`}</inlineCode>{` to make custom toggle components.`}</p>\n    <ReactPlayground codeText={CustomToggle} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"custom-toggle-with-expansion-awareness\"\n    }}>{`Custom Toggle with Expansion Awareness`}</h3>\n    <p>{`You may wish to have different styles for the toggle if it's associated section is expanded,\nthis can be achieved with a custom toggle that is context aware and also takes advantage of the `}<inlineCode parentName=\"p\">{`useAccordionToggle`}</inlineCode>{` hook.`}</p>\n    <ReactPlayground codeText={ContextAwareToggle} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Accordion} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.AccordionToggle} exportedBy={props.data.Accordion} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.AccordionCollapse} exportedBy={props.data.Accordion} mdxType=\"ComponentApi\" />\n    <h3 {...{\n      \"id\": \"useaccordiontoggle\"\n    }}>{`useAccordionToggle`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\n\nconst decoratedOnClick = useAccordionToggle(eventKey, onClick);\n`}</code></pre>\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { css } from 'astroturf';\n\nconst styles = css`\n  @import '../css/theme';\n\n  .callout {\n    border-left: 4px solid transparent;\n    padding: 1.2rem 1.2rem 1.2rem calc(1rem - 4px);\n    margin-left: -1rem;\n    margin-bottom: 2rem;\n  }\n\n  .warning {\n    composes: callout;\n    background-color: transparentize($note, 0.7);\n    border-left-color: $note;\n  }\n  .danger {\n    composes: callout;\n    background-color: transparentize($error, 0.7);\n    border-left-color: $error;\n  }\n`;\n\nconst propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n  theme: PropTypes.oneOf(['danger', 'warning']),\n};\n\nfunction Callout({ title, children, theme }) {\n  return (\n    <aside role=\"note\" className={styles[theme || 'warning']}>\n      {title && <header className=\"h5\">{title}</header>}\n      <div>{children}</div>\n    </aside>\n  );\n}\n\nCallout.propTypes = propTypes;\n\nexport default Callout;\n","module.exports = \"<Accordion>\\n  <Card>\\n    <Card.Header>\\n      <Accordion.Toggle as={Button} variant=\\\"link\\\" eventKey=\\\"0\\\">\\n        Click me!\\n      </Accordion.Toggle>\\n    </Card.Header>\\n    <Accordion.Collapse eventKey=\\\"0\\\">\\n      <Card.Body>Hello! I'm the body</Card.Body>\\n    </Accordion.Collapse>\\n  </Card>\\n  <Card>\\n    <Card.Header>\\n      <Accordion.Toggle as={Button} variant=\\\"link\\\" eventKey=\\\"1\\\">\\n        Click me!\\n      </Accordion.Toggle>\\n    </Card.Header>\\n    <Accordion.Collapse eventKey=\\\"1\\\">\\n      <Card.Body>Hello! I'm another body</Card.Body>\\n    </Accordion.Collapse>\\n  </Card>\\n</Accordion>;\\n\"","module.exports = \"<Accordion defaultActiveKey=\\\"0\\\">\\n  <Card>\\n    <Card.Header>\\n      <Accordion.Toggle as={Button} variant=\\\"link\\\" eventKey=\\\"0\\\">\\n        Click me!\\n      </Accordion.Toggle>\\n    </Card.Header>\\n    <Accordion.Collapse eventKey=\\\"0\\\">\\n      <Card.Body>Hello! I'm the body</Card.Body>\\n    </Accordion.Collapse>\\n  </Card>\\n  <Card>\\n    <Card.Header>\\n      <Accordion.Toggle as={Button} variant=\\\"link\\\" eventKey=\\\"1\\\">\\n        Click me!\\n      </Accordion.Toggle>\\n    </Card.Header>\\n    <Accordion.Collapse eventKey=\\\"1\\\">\\n      <Card.Body>Hello! I'm another body</Card.Body>\\n    </Accordion.Collapse>\\n  </Card>\\n</Accordion>;\\n\""],"sourceRoot":""}