{"version":3,"sources":["webpack:///./src/examples/Button/Disabled.js","webpack:///./src/examples/Button/Active.js","webpack:///./src/examples/Button/OutlineTypes.js","webpack:///./src/examples/Button/TagTypes.js","webpack:///./src/examples/Button/Sizes.js","webpack:///./src/pages/components/buttons.mdx","webpack:///./src/examples/Button/ToggleButton.js","webpack:///./src/examples/Button/Block.js","webpack:///./src/examples/Button/Loading.js","webpack:///./src/examples/Button/Types.js","webpack:///./src/examples/Button/ToggleButtonGroupControlled.js","webpack:///./src/examples/Button/ToggleButtonGroupUncontrolled.js"],"names":["module","exports","query","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","className","parentName","codeText","ButtonTypes","ButtonOutlineTypes","ButtonTagTypes","ButtonSizes","ButtonBlock","ButtonActive","ButtonDisabled","ButtonLoading","ToggleButton","ToggleButtonGroupUncontrolled","ToggleButtonGroupControlled","metadata","data","Button","ToggleButtonGroup","isMDXComponent"],"mappings":"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","file":"component---src-pages-components-buttons-mdx-59129a57d18b3ebd1afc.js","sourcesContent":["module.exports = \"<>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" disabled>\\n    Primary button\\n  </Button>{' '}\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" disabled>\\n    Button\\n  </Button>{' '}\\n  <Button href=\\\"#\\\" variant=\\\"secondary\\\" size=\\\"lg\\\" disabled>\\n    Link\\n  </Button>\\n</>;\\n\"","module.exports = \"<>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" active>\\n    Primary button\\n  </Button>{' '}\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" active>\\n    Button\\n  </Button>\\n</>;\\n\"","module.exports = \"<>\\n  <Button variant=\\\"outline-primary\\\">Primary</Button>{' '}\\n  <Button variant=\\\"outline-secondary\\\">Secondary</Button>{' '}\\n  <Button variant=\\\"outline-success\\\">Success</Button>{' '}\\n  <Button variant=\\\"outline-warning\\\">Warning</Button>{' '}\\n  <Button variant=\\\"outline-danger\\\">Danger</Button>{' '}\\n  <Button variant=\\\"outline-info\\\">Info</Button>{' '}\\n  <Button variant=\\\"outline-light\\\">Light</Button>{' '}\\n  <Button variant=\\\"outline-dark\\\">Dark</Button>\\n</>;\\n\"","module.exports = \"<>\\n  <Button href=\\\"#\\\">Link</Button> <Button type=\\\"submit\\\">Button</Button>{' '}\\n  <Button as=\\\"input\\\" type=\\\"button\\\" value=\\\"Input\\\" />{' '}\\n  <Button as=\\\"input\\\" type=\\\"submit\\\" value=\\\"Submit\\\" />{' '}\\n  <Button as=\\\"input\\\" type=\\\"reset\\\" value=\\\"Reset\\\" />\\n</>;\\n\"","module.exports = \"<>\\n  <div className=\\\"mb-2\\\">\\n    <Button variant=\\\"primary\\\" size=\\\"lg\\\">\\n      Large button\\n    </Button>{' '}\\n    <Button variant=\\\"secondary\\\" size=\\\"lg\\\">\\n      Large button\\n    </Button>\\n  </div>\\n  <div>\\n    <Button variant=\\\"primary\\\" size=\\\"sm\\\">\\n      Small button\\n    </Button>{' '}\\n    <Button variant=\\\"secondary\\\" size=\\\"sm\\\">\\n      Small button\\n    </Button>\\n  </div>\\n</>;\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/Shivprasad/Desktop/opensource/react-bootstrap/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport ButtonActive from '../../examples/Button/Active';\nimport ButtonBlock from '../../examples/Button/Block';\nimport ButtonDisabled from '../../examples/Button/Disabled';\nimport ButtonLoading from '../../examples/Button/Loading';\nimport ButtonOutlineTypes from '../../examples/Button/OutlineTypes';\nimport ButtonSizes from '../../examples/Button/Sizes';\nimport ButtonTagTypes from '../../examples/Button/TagTypes';\nimport ToggleButton from '../../examples/Button/ToggleButton';\nimport ToggleButtonGroupControlled from '../../examples/Button/ToggleButtonGroupControlled';\nimport ToggleButtonGroupUncontrolled from '../../examples/Button/ToggleButtonGroupUncontrolled';\nimport ButtonTypes from '../../examples/Button/Types';\nexport const query = graphql`\n  query ButtonQuery {\n    Button: componentMetadata(displayName: { eq: \"Button\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    ToggleButtonGroup: componentMetadata(\n      displayName: { eq: \"ToggleButtonGroup\" }\n    ) {\n      displayName\n      ...ComponentApi_metadata\n    }\n    ToggleButton: componentMetadata(displayName: { eq: \"ToggleButton\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"buttons\"\n    }}>{`Buttons`}</h1>\n    <p className=\"lead\">\n  Custom button styles for actions in forms, dialogs, and more with\n  support for multiple sizes, states, and more.\n    </p>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Use any of the available button style types to quickly create a styled\nbutton. Just modify the `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` prop.`}</p>\n    <ReactPlayground codeText={ButtonTypes} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"outline-buttons\"\n    }}>{`Outline buttons`}</h3>\n    <p>{`For a lighter touch, Buttons also come in `}<inlineCode parentName=\"p\">{`outline-*`}</inlineCode>{`\nvariants with no background color.`}</p>\n    <ReactPlayground codeText={ButtonOutlineTypes} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"button-tags\"\n    }}>{`Button tags`}</h2>\n    <p>{`Normally `}<inlineCode parentName=\"p\">{`<Button>`}</inlineCode>{` components will render a HTML\n`}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{` element. However you can render whatever you'd\nlike, adding a `}<inlineCode parentName=\"p\">{`href`}</inlineCode>{` prop will automatically render an\n`}<inlineCode parentName=\"p\">{`<a />`}</inlineCode>{` element. You can use the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` prop to\nrender whatever your heart desires. React Bootstrap will take care of\nthe proper ARIA roles for you.`}</p>\n    <ReactPlayground codeText={ButtonTagTypes} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <p>{`Fancy larger or smaller buttons? Add `}<inlineCode parentName=\"p\">{`size=\"lg\"`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`size=\"sm\"`}</inlineCode>{` for additional sizes.`}</p>\n    <ReactPlayground codeText={ButtonSizes} mdxType=\"ReactPlayground\" />\n    <p>{`Create block level buttons—those that span the full width of a parent—by\nadding `}<inlineCode parentName=\"p\">{`block`}</inlineCode></p>\n    <ReactPlayground codeText={ButtonBlock} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"active-state\"\n    }}>{`Active state`}</h2>\n    <p>{`To set a button's active state simply set the component's\n`}<inlineCode parentName=\"p\">{`active`}</inlineCode>{` prop.`}</p>\n    <ReactPlayground codeText={ButtonActive} mdxType=\"ReactPlayground\" />\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled state`}</h3>\n    <p>{`Make buttons look inactive by adding the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop to.`}</p>\n    <ReactPlayground codeText={ButtonDisabled} mdxType=\"ReactPlayground\" />\n    <p>{`Watch out! `}<inlineCode parentName=\"p\">{`<a>`}</inlineCode>{` elements don't naturally support a\n`}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` attribute. In browsers that support it this is handled with a\n`}<inlineCode parentName=\"p\">{`point-events: none`}</inlineCode>{` style but not all browsers support it\nyet.`}</p>\n    <p>{`React Bootstrap will prevent any `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` handlers from\nfiring regardless of the rendered element.`}</p>\n    <h2 {...{\n      \"id\": \"button-loading-state\"\n    }}>{`Button loading state`}</h2>\n    <p>{`When activating an asynchronous action from a button it is a good UX\npattern to give the user feedback as to the loading state, this can\neasily be done by updating your `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{`s\nprops from a state change like below.`}</p>\n    <ReactPlayground codeText={ButtonLoading} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"checkbox--radio\"\n    }}>{`Checkbox / Radio`}</h2>\n    <p>{`Buttons can also be used to style `}<inlineCode parentName=\"p\">{`checkbox`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`radio`}</inlineCode>{` form elements. This is helpful when you want a toggle\nbutton that works neatly inside an HTML form.`}</p>\n    <ReactPlayground codeText={ToggleButton} mdxType=\"ReactPlayground\" />\n    <p>{`The above handles styling, But requires manually controlling the\n`}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` state for each radio or checkbox in the group.`}</p>\n    <p>{`For a nicer experience with checked state management use the\n`}<inlineCode parentName=\"p\">{`<ToggleButtonGroup>`}</inlineCode>{` instead of a `}<inlineCode parentName=\"p\">{`<ButtonGroup toggle>`}</inlineCode>{` component.\nThe group behaves as a form component, where the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` is an array of the selected\n`}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`s for a named checkbox group or the single toggled\n`}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` in a similarly named radio group.`}</p>\n    <h4 {...{\n      \"id\": \"uncontrolled\"\n    }}>{`Uncontrolled`}</h4>\n    <ReactPlayground codeText={ToggleButtonGroupUncontrolled} mdxType=\"ReactPlayground\" />\n    <h4 {...{\n      \"id\": \"controlled\"\n    }}>{`Controlled`}</h4>\n    <ReactPlayground codeText={ToggleButtonGroupControlled} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.Button} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.ToggleButtonGroup} mdxType=\"ComponentApi\" />\n    <ComponentApi metadata={props.data.ToggleButton} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"function ToggleButtonExample() {\\n  const [checked, setChecked] = useState(false);\\n  const [radioValue, setRadioValue] = useState('1');\\n\\n  const radios = [\\n    { name: 'Active', value: '1' },\\n    { name: 'Radio', value: '2' },\\n    { name: 'Radio', value: '3' },\\n  ];\\n\\n  return (\\n    <>\\n      <ButtonGroup toggle className=\\\"mb-2\\\">\\n        <ToggleButton\\n          type=\\\"checkbox\\\"\\n          variant=\\\"secondary\\\"\\n          checked={checked}\\n          value=\\\"1\\\"\\n          onChange={(e) => setChecked(e.currentTarget.checked)}\\n        >\\n          Checked\\n        </ToggleButton>\\n      </ButtonGroup>\\n      <br />\\n      <ButtonGroup toggle>\\n        {radios.map((radio, idx) => (\\n          <ToggleButton\\n            key={idx}\\n            type=\\\"radio\\\"\\n            variant=\\\"secondary\\\"\\n            name=\\\"radio\\\"\\n            value={radio.value}\\n            checked={radioValue === radio.value}\\n            onChange={(e) => setRadioValue(e.currentTarget.value)}\\n          >\\n            {radio.name}\\n          </ToggleButton>\\n        ))}\\n      </ButtonGroup>\\n    </>\\n  );\\n}\\n\\nrender(<ToggleButtonExample />);\\n\"","module.exports = \"<>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n</>;\\n\"","module.exports = \"function simulateNetworkRequest() {\\n  return new Promise((resolve) => setTimeout(resolve, 2000));\\n}\\n\\nfunction LoadingButton() {\\n  const [isLoading, setLoading] = useState(false);\\n\\n  useEffect(() => {\\n    if (isLoading) {\\n      simulateNetworkRequest().then(() => {\\n        setLoading(false);\\n      });\\n    }\\n  }, [isLoading]);\\n\\n  const handleClick = () => setLoading(true);\\n\\n  return (\\n    <Button\\n      variant=\\\"primary\\\"\\n      disabled={isLoading}\\n      onClick={!isLoading ? handleClick : null}\\n    >\\n      {isLoading ? 'Loading…' : 'Click to load'}\\n    </Button>\\n  );\\n}\\n\\nrender(<LoadingButton />);\\n\"","module.exports = \"<>\\n  <Button variant=\\\"primary\\\">Primary</Button>{' '}\\n  <Button variant=\\\"secondary\\\">Secondary</Button>{' '}\\n  <Button variant=\\\"success\\\">Success</Button>{' '}\\n  <Button variant=\\\"warning\\\">Warning</Button>{' '}\\n  <Button variant=\\\"danger\\\">Danger</Button> <Button variant=\\\"info\\\">Info</Button>{' '}\\n  <Button variant=\\\"light\\\">Light</Button> <Button variant=\\\"dark\\\">Dark</Button>{' '}\\n  <Button variant=\\\"link\\\">Link</Button>\\n</>;\\n\"","module.exports = \"function ToggleButtonGroupControlled() {\\n  const [value, setValue] = useState([1, 3]);\\n\\n  /*\\n   * The second argument that will be passed to\\n   * `handleChange` from `ToggleButtonGroup`\\n   * is the SyntheticEvent object, but we are\\n   * not using it in this example so we will omit it.\\n   */\\n  const handleChange = (val) => setValue(val);\\n\\n  return (\\n    <ToggleButtonGroup type=\\\"checkbox\\\" value={value} onChange={handleChange}>\\n      <ToggleButton value={1}>Option 1</ToggleButton>\\n      <ToggleButton value={2}>Option 2</ToggleButton>\\n      <ToggleButton value={3}>Option 3</ToggleButton>\\n    </ToggleButtonGroup>\\n  );\\n}\\n\\nrender(<ToggleButtonGroupControlled />);\\n\"","module.exports = \"<>\\n  <ToggleButtonGroup type=\\\"checkbox\\\" defaultValue={[1, 3]} className=\\\"mb-2\\\">\\n    <ToggleButton value={1}>Checkbox 1 (pre-checked)</ToggleButton>\\n    <ToggleButton value={2}>Checkbox 2</ToggleButton>\\n    <ToggleButton value={3}>Checkbox 3 (pre-checked)</ToggleButton>\\n  </ToggleButtonGroup>\\n  <br />\\n  <ToggleButtonGroup type=\\\"radio\\\" name=\\\"options\\\" defaultValue={1}>\\n    <ToggleButton value={1}>Radio 1 (pre-checked)</ToggleButton>\\n    <ToggleButton value={2}>Radio 2</ToggleButton>\\n    <ToggleButton value={3}>Radio 3</ToggleButton>\\n  </ToggleButtonGroup>\\n</>;\\n\""],"sourceRoot":""}