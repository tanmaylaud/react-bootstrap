{"version":3,"sources":["webpack:///./src/examples/Spinner/Variants.js","webpack:///./src/examples/Spinner/Grow.js","webpack:///./src/examples/Spinner/Buttons.js","webpack:///./src/examples/Spinner/Sizes.js","webpack:///./src/pages/components/spinners.mdx","webpack:///./src/examples/Spinner/Border.js","webpack:///./src/examples/Spinner/Basic.js"],"names":["module","exports","query","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","codeText","SpinnerBasic","parentName","SpinnerBorder","SpinnerGrow","SpinnerVariants","SpinnerSizes","SpinnerButtons","metadata","data","isMDXComponent"],"mappings":"+EAAAA,EAAOC,QAAU,gzB,qBCAjBD,EAAOC,QAAU,mC,mBCAjBD,EAAOC,QAAU,8b,mBCAjBD,EAAOC,QAAU,sK,gXCeJC,EAAQ,aAQRC,EAAe,GAOtBC,EAAc,CAClBF,QACAC,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,mBAAQ,CACN,GAAM,YADR,YAGA,sHAEA,cAAC,IAAD,CAAiBC,SAAUC,IAAcF,QAAQ,oBACjD,mBAAQ,CACN,GAAM,cADR,cAGA,8HACyB,4BAAYG,WAAW,KAAvB,aADzB,mFAGA,uBAAG,wBAAQA,WAAW,KAAnB,qBAA6C,4BAAYA,WAAW,UAAvB,YAChD,cAAC,IAAD,CAAiBF,SAAUG,IAAeJ,QAAQ,oBAClD,uBAAG,wBAAQG,WAAW,KAAnB,mBAA2C,4BAAYA,WAAW,UAAvB,QAA3C,MACH,cAAC,IAAD,CAAiBF,SAAUI,IAAaL,QAAQ,oBAChD,mBAAQ,CACN,GAAM,YADR,YAGA,+GACU,4BAAYG,WAAW,KAAvB,WADV,mEAEa,4BAAYA,WAAW,KAAvB,SAFb,qCAGA,cAAC,IAAD,CAAiBF,SAAUK,IAAiBN,QAAQ,oBACpD,mBAAQ,CACN,GAAM,UADR,UAGA,qIACmC,4BAAYG,WAAW,KAAvB,QADnC,gBACoG,4BAAYA,WAAW,KAAvB,MADpG,KAEA,cAAC,IAAD,CAAiBF,SAAUM,IAAcP,QAAQ,oBACjD,mBAAQ,CACN,GAAM,WADR,WAGA,6LAEyB,4BAAYG,WAAW,KAAvB,QAFzB,uBAEiG,4BAAYA,WAAW,KAAvB,MAFjG,kDAIA,cAAC,IAAD,CAAiBF,SAAUO,IAAgBR,QAAQ,oBACnD,mBAAQ,CACN,GAAM,iBADR,iBAGA,oIACsC,4BAAYG,WAAW,KAAvB,QADtC,2IAGuD,4BAAYA,WAAW,KAAvB,WAHvD,YAKA,wGAEA,cAAC,IAAD,CAAiBF,SAAUC,IAAcF,QAAQ,oBACjD,mBAAQ,CACN,GAAM,OADR,OAGA,cAAC,IAAD,CAAcS,SAAUV,EAAMW,KAAKD,SAAUT,QAAQ,kBAMzDH,EAAWc,gBAAiB,G,qBCrG5BrB,EAAOC,QAAU,qC,qBCAjBD,EAAOC,QAAU","file":"component---src-pages-components-spinners-mdx-e04e19fda2cccbeba7dd.js","sourcesContent":["module.exports = \"<>\\n  <Spinner animation=\\\"border\\\" variant=\\\"primary\\\" />\\n  <Spinner animation=\\\"border\\\" variant=\\\"secondary\\\" />\\n  <Spinner animation=\\\"border\\\" variant=\\\"success\\\" />\\n  <Spinner animation=\\\"border\\\" variant=\\\"danger\\\" />\\n  <Spinner animation=\\\"border\\\" variant=\\\"warning\\\" />\\n  <Spinner animation=\\\"border\\\" variant=\\\"info\\\" />\\n  <Spinner animation=\\\"border\\\" variant=\\\"light\\\" />\\n  <Spinner animation=\\\"border\\\" variant=\\\"dark\\\" />\\n  <Spinner animation=\\\"grow\\\" variant=\\\"primary\\\" />\\n  <Spinner animation=\\\"grow\\\" variant=\\\"secondary\\\" />\\n  <Spinner animation=\\\"grow\\\" variant=\\\"success\\\" />\\n  <Spinner animation=\\\"grow\\\" variant=\\\"danger\\\" />\\n  <Spinner animation=\\\"grow\\\" variant=\\\"warning\\\" />\\n  <Spinner animation=\\\"grow\\\" variant=\\\"info\\\" />\\n  <Spinner animation=\\\"grow\\\" variant=\\\"light\\\" />\\n  <Spinner animation=\\\"grow\\\" variant=\\\"dark\\\" />\\n</>;\\n\"","module.exports = \"<Spinner animation=\\\"grow\\\" />;\\n\"","module.exports = \"<>\\n  <Button variant=\\\"primary\\\" disabled>\\n    <Spinner\\n      as=\\\"span\\\"\\n      animation=\\\"border\\\"\\n      size=\\\"sm\\\"\\n      role=\\\"status\\\"\\n      aria-hidden=\\\"true\\\"\\n    />\\n    <span className=\\\"sr-only\\\">Loading...</span>\\n  </Button>{' '}\\n  <Button variant=\\\"primary\\\" disabled>\\n    <Spinner\\n      as=\\\"span\\\"\\n      animation=\\\"grow\\\"\\n      size=\\\"sm\\\"\\n      role=\\\"status\\\"\\n      aria-hidden=\\\"true\\\"\\n    />\\n    Loading...\\n  </Button>\\n</>;\\n\"","module.exports = \"<>\\n  <Spinner animation=\\\"border\\\" size=\\\"sm\\\" />\\n  <Spinner animation=\\\"border\\\" />\\n  <Spinner animation=\\\"grow\\\" size=\\\"sm\\\" />\\n  <Spinner animation=\\\"grow\\\" />\\n</>;\\n\"","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/Shivprasad/Desktop/opensource/react-bootstrap/react-bootstrap/www/src/layouts/ApiLayout.js\";\nimport { graphql } from 'gatsby';\nimport ComponentApi from '../../components/ComponentApi';\nimport ReactPlayground from '../../components/ReactPlayground';\nimport SpinnerBasic from '../../examples/Spinner/Basic';\nimport SpinnerBorder from '../../examples/Spinner/Border';\nimport SpinnerGrow from '../../examples/Spinner/Grow';\nimport SpinnerVariants from '../../examples/Spinner/Variants';\nimport SpinnerSizes from '../../examples/Spinner/Sizes';\nimport SpinnerButtons from '../../examples/Spinner/Buttons';\nexport const query = graphql`\n  query Spinner {\n    metadata: componentMetadata(displayName: { eq: \"Spinner\" }) {\n      displayName\n      ...ComponentApi_metadata\n    }\n  }\n`;\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"spinners\"\n    }}>{`Spinners`}</h1>\n    <p>{`Spinners can be used to show the loading state in your projects.\nSpinners can be used as a`}</p>\n    <ReactPlayground codeText={SpinnerBasic} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"animations\"\n    }}>{`Animations`}</h2>\n    <p>{`Bootstrap offers two animation styles for spinners. The animation style\ncan be configured with the `}<inlineCode parentName=\"p\">{`animation`}</inlineCode>{` property. An animation style\nmust always be provided when creating a spinner.`}</p>\n    <p><strong parentName=\"p\">{` Border Spinner - `}<inlineCode parentName=\"strong\">{`border`}</inlineCode></strong></p>\n    <ReactPlayground codeText={SpinnerBorder} mdxType=\"ReactPlayground\" />\n    <p><strong parentName=\"p\">{` Grow Spinner - `}<inlineCode parentName=\"strong\">{`grow`}</inlineCode>{` `}</strong></p>\n    <ReactPlayground codeText={SpinnerGrow} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h2>\n    <p>{`All standard visual variants are available for both animation styles by\nsetting the `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{` property. Alternatively spinners can be custom\nsized with the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` property, or custom CSS classes.`}</p>\n    <ReactPlayground codeText={SpinnerVariants} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"sizing\"\n    }}>{`Sizing`}</h2>\n    <p>{`In addition to the standard size, a smaller additional preconfigured\nsize is available by configuring the `}<inlineCode parentName=\"p\">{`size`}</inlineCode>{` property to `}<inlineCode parentName=\"p\">{`sm`}</inlineCode>{`.`}</p>\n    <ReactPlayground codeText={SpinnerSizes} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"buttons\"\n    }}>{`Buttons`}</h2>\n    <p>{`Like the original Bootstrap spinners, these can also be used with\nbuttons. To use this component out-of-the-box it is recommended you\nchange the element type to `}<inlineCode parentName=\"p\">{`span`}</inlineCode>{` by configuring the `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` property when\nusing spinners inside buttons.`}</p>\n    <ReactPlayground codeText={SpinnerButtons} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <p>{`To ensure the maximum accessibility for spinner components it is\nrecommended you provide a relevant ARIA `}<inlineCode parentName=\"p\">{`role`}</inlineCode>{` property,\nand include screenreader-only readable text representation of the\nspinner's meaning inside the component using Bootstrap's `}<inlineCode parentName=\"p\">{`sr-only`}</inlineCode>{`\nclass.`}</p>\n    <p>{`The example below provides an example of accessible usage of this\ncomponent.`}</p>\n    <ReactPlayground codeText={SpinnerBasic} mdxType=\"ReactPlayground\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <ComponentApi metadata={props.data.metadata} mdxType=\"ComponentApi\" />\n\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = \"<Spinner animation=\\\"border\\\" />;\\n\"","module.exports = \"<Spinner animation=\\\"border\\\" role=\\\"status\\\">\\n  <span className=\\\"sr-only\\\">Loading...</span>\\n</Spinner>;\\n\""],"sourceRoot":""}